import{_ as i,c as a,o as e,ag as n}from"./chunks/framework.DbtdwhWj.js";const c=JSON.parse('{"title":"ADR-014: RPC Developer Experience and Safety Improvements","description":"","frontmatter":{},"headers":[],"relativePath":"adr/014-rpc-dx-safety-improvements.md","filePath":"adr/014-rpc-dx-safety-improvements.md","lastUpdated":1762007311000}'),t={name:"adr/014-rpc-dx-safety-improvements.md"};function l(p,s,r,h,o,k){return e(),a("div",null,[...s[0]||(s[0]=[n(`<h1 id="adr-014-rpc-developer-experience-and-safety-improvements" tabindex="-1">ADR-014: RPC Developer Experience and Safety Improvements <a class="header-anchor" href="#adr-014-rpc-developer-experience-and-safety-improvements" aria-label="Permalink to &quot;ADR-014: RPC Developer Experience and Safety Improvements&quot;">​</a></h1><p><strong>Status:</strong> Implemented <strong>Date:</strong> 2025-10-30 <strong>References:</strong> ADR-012, ADR-013</p><h2 id="problem" tabindex="-1">Problem <a class="header-anchor" href="#problem" aria-label="Permalink to &quot;Problem&quot;">​</a></h2><p>While core RPC reliability features are production-ready (abort, deadlines, one-shot, backpressure), several developer experience issues remain:</p><ol><li><strong>Implicit correlation policy</strong>: Clients must manually generate <code>correlationId</code>; missing IDs cause silent match failures</li><li><strong>Unclear intent</strong>: No explicit method to signal &quot;send to this client&quot; vs. other send methods</li><li><strong>Idempotency key format</strong> left to apps; no helper for consistent canonicalization</li><li><strong>Reserved prefix enforcement</strong>: Runtime filtering works, but schema creation doesn&#39;t fail fast</li><li><strong>Typed error codes</strong>: No client-side type narrowing for error handling</li><li><strong>Backpressure tuning</strong>: Configuration hidden; no platform-specific guidance</li></ol><h2 id="solution" tabindex="-1">Solution <a class="header-anchor" href="#solution" aria-label="Permalink to &quot;Solution&quot;">​</a></h2><p>Six surgical DX improvements keeping the API surface minimal:</p><h3 id="_1-auto-correlation-client-server" tabindex="-1">1. Auto-Correlation (Client + Server) <a class="header-anchor" href="#_1-auto-correlation-client-server" aria-label="Permalink to &quot;1. Auto-Correlation (Client + Server)&quot;">​</a></h3><p><strong>Problem</strong>: Manual correlation IDs are error-prone.</p><p><strong>Solution</strong>:</p><ul><li><strong>Client</strong>: Auto-generate <code>correlationId</code> using <code>crypto.randomUUID()</code> if not provided</li><li><strong>Server</strong>: Synthesize missing <code>correlationId</code> for RPC messages; tag with <code>meta.syntheticCorrelation = true</code> for debugging</li></ul><p><strong>Impact</strong>: Zero-cost invariant (every RPC always has a correlationId)</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Client side (automatic)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> correlationId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> opts?.correlationId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">??</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> crypto.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">randomUUID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Server side (fallback)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (isRpc </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">correlationId) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  correlationId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> crypto.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">randomUUID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  meta.syntheticCorrelation </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// For debugging</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_2-primary-method-ctx-send-for-semantic-clarity" tabindex="-1">2. Primary Method: <code>ctx.send()</code> for Semantic Clarity <a class="header-anchor" href="#_2-primary-method-ctx-send-for-semantic-clarity" aria-label="Permalink to &quot;2. Primary Method: \`ctx.send()\` for Semantic Clarity&quot;">​</a></h3><p><strong>Problem</strong>: Single send method doesn&#39;t clearly signal intent (unicast to sender vs. broadcast).</p><p><strong>Solution</strong>:</p><ul><li>Introduce <code>ctx.send()</code> as the primary method for sending to client (always available)</li><li>Clear semantics: &quot;send to this client only&quot;</li><li>Functionally identical to <code>ctx.send()</code></li></ul><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">router.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(QueryMessage, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ctx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> queryDatabase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx.payload);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ctx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(QueryResponse, result); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Clear: send to this client only</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h3 id="_3-typed-rpcerrorcode-for-client-error-narrowing" tabindex="-1">3. Typed RpcErrorCode for Client Error Narrowing <a class="header-anchor" href="#_3-typed-rpcerrorcode-for-client-error-narrowing" aria-label="Permalink to &quot;3. Typed RpcErrorCode for Client Error Narrowing&quot;">​</a></h3><p><strong>Problem</strong>: No way to type-narrow error codes in catch blocks.</p><p><strong>Solution</strong>:</p><ul><li>Export <code>RpcErrorCode</code> union type from client</li><li>Make <code>RpcError</code> generic: <code>RpcError&lt;TCode extends RpcErrorCode&gt;</code></li></ul><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RpcErrorCode</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;INVALID_ARGUMENT&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;UNAUTHENTICATED&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;PERMISSION_DENIED&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;NOT_FOUND&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;RESOURCE_EXHAUSTED&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;DEADLINE_EXCEEDED&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;CANCELLED&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;INTERNAL&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;ONE_SHOT&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Allow custom codes</span></span></code></pre></div><p><strong>Usage</strong>:</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Query, payload);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (e) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (e </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RpcError</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e.code </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;RESOURCE_EXHAUSTED&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Type-narrowed: retryAfterMs guaranteed present</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e.retryAfterMs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">??</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_4-idempotency-helper-stablestringify-idempotencykey" tabindex="-1">4. Idempotency Helper: <code>stableStringify()</code> + <code>idempotencyKey()</code> <a class="header-anchor" href="#_4-idempotency-helper-stablestringify-idempotencykey" aria-label="Permalink to &quot;4. Idempotency Helper: \`stableStringify()\` + \`idempotencyKey()\`&quot;">​</a></h3><p><strong>Problem</strong>: Apps roll their own payload hashing; leads to inconsistent formats and DoS risks (expensive hashes).</p><p><strong>Solution</strong>:</p><ul><li>Export <code>stableStringify(data)</code> for canonical JSON (sorted keys, consistent output)</li><li>Export <code>idempotencyKey(opts)</code> helper for standard key generation</li></ul><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { stableStringify, idempotencyKey } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;@ws-kit/core&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> crypto </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;node:crypto&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> payload</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { user: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;alice&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, action: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;purchase&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> hash</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> crypto</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createHash</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sha256&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stableStringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(payload))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">digest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hex&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> idempotencyKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  tenant: ctx.ws.data?.tenantId,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  user: ctx.ws.data?.userId,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  type: ctx.type,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  hash,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Result: &quot;tenant:alice:purchase:abc123def...&quot;</span></span></code></pre></div><p><strong>Recommendation</strong> (documented in ADR-013):</p><ul><li>Domain-key first: <code>tenant:user:type:hash</code></li><li>Cap key length: 256 bytes</li><li>Hash payload with SHA256 (fast, secure)</li></ul><h3 id="_5-reserved-prefix-enforcement-at-design-time" tabindex="-1">5. Reserved Prefix Enforcement at Design-Time <a class="header-anchor" href="#_5-reserved-prefix-enforcement-at-design-time" aria-label="Permalink to &quot;5. Reserved Prefix Enforcement at Design-Time&quot;">​</a></h3><p><strong>Problem</strong>: Runtime filtering works, but schema creation doesn&#39;t fail fast.</p><p><strong>Solution</strong>:</p><ul><li>Add validation in <code>rpc()</code> and <code>message()</code> helpers</li><li>Throw immediately if type starts with <code>$ws:</code></li></ul><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// In packages/zod/src/schema.ts, packages/valibot/src/schema.ts</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> RESERVED_PREFIX</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;$ws:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (requestType.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startsWith</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">RESERVED_PREFIX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`Reserved prefix &quot;\${</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">RESERVED_PREFIX</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot; not allowed...\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>Impact</strong>: Developers catch mistakes at definition time, not runtime</p><h3 id="_6-backpressure-configuration-visibility" tabindex="-1">6. Backpressure Configuration Visibility <a class="header-anchor" href="#_6-backpressure-configuration-visibility" aria-label="Permalink to &quot;6. Backpressure Configuration Visibility&quot;">​</a></h3><p><strong>Problem</strong>: <code>maxQueuedBytesPerSocket</code> is a router option, but not visible in adapter docs.</p><p><strong>Solution</strong>:</p><ul><li>Surface in adapter <code>serve()</code>/<code>handler()</code> options with JSDoc guidance</li><li>Document platform-specific recommendations</li></ul><p><strong>Adapter Guidance</strong>:</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// @ws-kit/bun</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">serve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(router, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  maxQueuedBytesPerSocket: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1_000_000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1MB, advisory per platform</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Bun: 1-4MB typical, varies by system memory</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// @ws-kit/cloudflare-do</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">handler </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createCloudflareHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(router, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  maxQueuedBytesPerSocket: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">512_000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 512KB, conservative for DO limits</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // DO: message cap ~125KB, request cap ~30MB</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h2 id="testing" tabindex="-1">Testing <a class="header-anchor" href="#testing" aria-label="Permalink to &quot;Testing&quot;">​</a></h2><p>New tests ensure invariants hold:</p><ol><li><strong>Property tests</strong>: One-shot, deadline, correlation invariants</li><li><strong>Reconnect fuzz</strong>: Disconnect/reconnect with different resend policies</li><li><strong>Backpressure</strong>: Buffer exceeded → <code>RESOURCE_EXHAUSTED</code> error, never partial replies</li><li><strong>Error code coverage</strong>: All <code>RpcErrorCode</code> types tested</li><li><strong>Reserved prefix</strong>: <code>rpc(&quot;$ws:BAD&quot;, ...)</code> throws at definition time</li></ol><h2 id="implementation-status" tabindex="-1">Implementation Status <a class="header-anchor" href="#implementation-status" aria-label="Permalink to &quot;Implementation Status&quot;">​</a></h2><p>✅ <strong>All changes implemented and tested:</strong></p><ul><li>Auto-correlation on client + server synthesis</li><li><code>ctx.send()</code> as primary send method</li><li><code>RpcError</code> generic with <code>RpcErrorCode</code> union</li><li><code>stableStringify()</code> and <code>idempotencyKey()</code> utilities</li><li>Design-time reserved prefix validation</li><li>All 953 tests passing</li></ul><p><strong>Library Status</strong>: This library has not been published yet, so all API decisions are final with no backward compatibility constraints.</p><h2 id="_7-incomplete-rpc-handler-detection" tabindex="-1">7. Incomplete RPC Handler Detection <a class="header-anchor" href="#_7-incomplete-rpc-handler-detection" aria-label="Permalink to &quot;7. Incomplete RPC Handler Detection&quot;">​</a></h2><p><strong>Problem</strong>: RPC handlers that complete without calling <code>ctx.reply()</code> or <code>ctx.error()</code> cause clients to hang with timeouts. This is a common developer mistake but only caught at runtime via client timeout, with no server-side warning.</p><p><strong>Solution</strong>:</p><p>Add automatic warning in development mode when RPC handlers complete without sending a terminal response:</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Enable by default (router option)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> router</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createRouter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  warnIncompleteRpc: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Default: enabled</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Disable for legitimate async patterns</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> router</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createRouter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  warnIncompleteRpc: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// For spawned async work</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p><strong>Behavior</strong>:</p><ul><li><strong>When enabled</strong> (default): After RPC handler execution completes, check if terminal response was sent</li><li><strong>If not terminal</strong>: Emit warning with message type, correlation ID, and actionable guidance</li><li><strong>Dev-mode only</strong>: Warnings only in <code>NODE_ENV !== &quot;production&quot;</code></li><li><strong>Zero cost in production</strong>: No checks or logging when disabled or in production</li></ul><p><strong>Warning message example</strong>:</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[ws] RPC handler for GET_USER (req-abc123) completed without calling ctx.reply() or ctx.error().</span></span>
<span class="line"><span>Client may timeout. Consider using ctx.reply() to send a response, or disable this warning</span></span>
<span class="line"><span>with warnIncompleteRpc: false if spawning async work.</span></span></code></pre></div><p><strong>Use cases</strong>:</p><p>✅ <strong>Caught immediately</strong>:</p><ul><li>Sync handlers that forget reply</li><li>Async handlers that return early without error</li><li>Handlers with conditional returns missing error cases</li></ul><p>✅ <strong>Known false positive (legitimate async)</strong>:</p><ul><li><code>setTimeout(() =&gt; ctx.reply(...), delay)</code> — warns because reply happens after handler completes</li><li><code>setImmediate(() =&gt; ctx.reply(...))</code> — same pattern</li></ul><p><strong>Mitigation for async patterns</strong>:</p><p>Either disable the warning or use a pattern that marks async work:</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Option 1: Disable warning (for known async patterns)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> router</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createRouter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ warnIncompleteRpc: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Option 2: Use explicit deferral (future enhancement)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ctx.defer(() =&gt; reply()):</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Explicitly mark async work</span></span></code></pre></div><p><strong>Testing</strong>:</p><p>Tests verify:</p><ul><li>Warning fires for sync/async handlers without reply</li><li>No warning when reply or error is sent</li><li>No warning for non-RPC messages</li><li>Respects <code>warnIncompleteRpc: false</code> config</li><li>Warning only in dev mode</li><li>Warning includes message type and correlation ID</li></ul><p>See <code>packages/core/test/features/rpc-incomplete-warning.test.ts</code> for full test coverage.</p><h2 id="future-work" tabindex="-1">Future Work <a class="header-anchor" href="#future-work" aria-label="Permalink to &quot;Future Work&quot;">​</a></h2><ul><li>Streaming RPC with enhanced AsyncIterable client API</li><li>Client-side AbortSignal sending <code>$ws:abort</code></li><li>Reconnect policy options (explicit <code>resendOnReconnect</code> knob)</li></ul><h2 id="references" tabindex="-1">References <a class="header-anchor" href="#references" aria-label="Permalink to &quot;References&quot;">​</a></h2><ul><li><a href="./012-rpc-minimal-reliable">ADR-012: Minimal Reliable RPC</a> — Core lifecycle features</li><li><a href="./013-rpc-reconnect-idempotency">ADR-013: Reconnect &amp; Idempotency Policy</a> — Client resend logic</li><li><a href="./../guides/rpc-troubleshooting">RPC Troubleshooting</a> — Common issues and solutions</li></ul>`,76)])])}const g=i(t,[["render",l]]);export{c as __pageData,g as default};
