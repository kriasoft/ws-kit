import{_ as t,c as i,o as r,ag as o}from"./chunks/framework.DbtdwhWj.js";const g=JSON.parse('{"title":"Development Rules","description":"","frontmatter":{},"headers":[],"relativePath":"specs/rules.md","filePath":"specs/rules.md","lastUpdated":1762007311000}'),s={name:"specs/rules.md"};function a(n,e,l,d,c,h){return r(),i("div",null,[...e[0]||(e[0]=[o(`<h1 id="development-rules" tabindex="-1">Development Rules <a class="header-anchor" href="#development-rules" aria-label="Permalink to &quot;Development Rules&quot;">​</a></h1><p><strong>Quick Lookup Index for MUST/NEVER/ALWAYS rules.</strong></p><p>This is a <strong>rapid reference</strong> to help you find rules quickly. For implementation details, rationale, and complete guidance, always follow the linked canonical specs.</p><p><strong>Important</strong>: This file is an INDEX and QUICK REFERENCE, not a canonical source. The detailed specs (schema.md, router.md, validation.md, etc.) are authoritative. When guidance seems incomplete here, that&#39;s intentional—click the linked specs for full context and rationale.</p><p><strong>How to Use:</strong></p><ol><li><strong>Quickly find rules</strong>: Scan this index for your use case</li><li><strong>Get implementation details</strong>: Click the linked <code>@spec.md#section</code> references</li><li><strong>Understand trade-offs</strong>: Read the referenced spec section for &quot;why&quot; and detailed examples</li><li><strong>When in doubt</strong>: The linked canonical section always takes precedence</li></ol><p><strong>What&#39;s NOT here</strong>: Design rationale, code examples (beyond one-liners), trade-off analysis. Read the linked specs for those.</p><hr><h2 id="critical-rules-never-violate" tabindex="-1">Critical Rules (NEVER Violate) <a class="header-anchor" href="#critical-rules-never-violate" aria-label="Permalink to &quot;Critical Rules (NEVER Violate)&quot;">​</a></h2><h3 id="type-safety" tabindex="-1">Type Safety <a class="header-anchor" href="#type-safety" aria-label="Permalink to &quot;Type Safety&quot;">​</a></h3><ul><li><strong>NEVER</strong> access <code>ctx.payload</code> if schema doesn&#39;t define it (TypeScript will error) → ADR-001</li><li><strong>ALWAYS</strong> rely on TypeScript to enforce <code>ctx.payload</code> presence via conditional typing → ADR-001</li></ul><h3 id="import-patterns-adr-007-export-with-helpers" tabindex="-1">Import Patterns (ADR-007: Export-with-Helpers) <a class="header-anchor" href="#import-patterns-adr-007-export-with-helpers" aria-label="Permalink to &quot;Import Patterns (ADR-007: Export-with-Helpers)&quot;">​</a></h3><p>See <strong><a href="./schema#canonical-import-patterns">@schema.md#Canonical-Import-Patterns</a></strong> for complete patterns and examples.</p><p><strong>MUST enforce:</strong></p><ul><li><strong>ALWAYS</strong> use single canonical import source (prevents dual package hazard) → ADR-007</li><li><strong>NEVER</strong> import directly from <code>zod</code> or <code>valibot</code>; use <code>@ws-kit/zod</code> or <code>@ws-kit/valibot</code></li></ul><p><strong>Recommended ESLint rule:</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;no-restricted-imports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  patterns: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    { group: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;zod&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], message: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Use @ws-kit/zod instead&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    { group: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;valibot&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], message: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Use @ws-kit/valibot instead&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}]</span></span></code></pre></div><h3 id="runtime-selection-adr-006" tabindex="-1">Runtime Selection (ADR-006) <a class="header-anchor" href="#runtime-selection-adr-006" aria-label="Permalink to &quot;Runtime Selection (ADR-006)&quot;">​</a></h3><p><strong>Production deployments MUST declare platform explicitly:</strong></p><ul><li><strong>ALWAYS</strong> use platform-specific package and <code>serve()</code> function → ADR-006 <ul><li>Bun: <code>import { serve } from &quot;@ws-kit/bun&quot;</code></li><li>Cloudflare DO: High-level <code>serve()</code> or low-level <code>createDurableObjectHandler()</code></li></ul></li><li><strong>NEVER</strong> rely on auto-detection → ADR-006</li></ul><p><strong>Examples:</strong></p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ✅ Bun (recommended for Bun deployments)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { serve } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;@ws-kit/bun&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">serve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(router, { port: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ✅ Cloudflare Durable Objects</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { createDurableObjectHandler } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;@ws-kit/cloudflare-do&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> handler</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createDurableObjectHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(router);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">state</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DurableObjectState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> handler.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(req);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h3 id="security-validation" tabindex="-1">Security &amp; Validation <a class="header-anchor" href="#security-validation" aria-label="Permalink to &quot;Security &amp; Validation&quot;">​</a></h3><ul><li><strong>NEVER</strong> re-validate in handlers (trust schema) → @validation.md#Flow</li><li><strong>ALWAYS</strong> use strict schemas (reject unknown keys) → @schema.md#Strict-Schemas</li></ul><h3 id="identity-reserved-keys-critical-for-security" tabindex="-1">Identity &amp; Reserved Keys (Critical for Security) <a class="header-anchor" href="#identity-reserved-keys-critical-for-security" aria-label="Permalink to &quot;Identity &amp; Reserved Keys (Critical for Security)&quot;">​</a></h3><ul><li><strong>NEVER</strong> access <code>clientId</code> via <code>ctx.meta.clientId</code> — server generates it; use <code>ctx.ws.data.clientId</code> instead → @validation.md#normalization-rules</li><li><strong>NEVER</strong> allow clients to set reserved keys (<code>clientId</code>, <code>receivedAt</code>) — routers strip them during normalization → @validation.md#normalization-rules</li><li><strong>NEVER</strong> trust client-provided <code>receivedAt</code> timestamps — use <code>ctx.receivedAt</code> for authoritative server time → @schema.md#Which-timestamp-to-use</li><li><strong>ALWAYS</strong> access identity via <code>ctx.ws.data.clientId</code> in handlers and middleware → @router.md#Type-Safe-Sending</li></ul><hr><h2 id="required-patterns-always-use" tabindex="-1">Required Patterns (ALWAYS Use) <a class="header-anchor" href="#required-patterns-always-use" aria-label="Permalink to &quot;Required Patterns (ALWAYS Use)&quot;">​</a></h2><h3 id="validation-flow" tabindex="-1">Schema &amp; Validation <a class="header-anchor" href="#validation-flow" aria-label="Permalink to &quot;Schema &amp; Validation {#validation-flow}&quot;">​</a></h3><ul><li><strong>ALWAYS</strong> follow validation flow (Parse → Type Check → Lookup → Normalize → Validate → Middleware → Handler) → @validation.md#Flow</li><li><strong>ALWAYS</strong> normalize before validate (strip reserved keys BEFORE schema) → @validation.md#normalization-rules</li></ul><h3 id="middleware" tabindex="-1">Middleware <a class="header-anchor" href="#middleware" aria-label="Permalink to &quot;Middleware&quot;">​</a></h3><ul><li><strong>ALWAYS</strong> use <code>router.use(middleware)</code> for global middleware → @router.md#Middleware</li><li><strong>ALWAYS</strong> use <code>router.use(schema, middleware)</code> for per-route middleware → @router.md#Middleware</li><li><strong>ALWAYS</strong> call <code>next()</code> to continue to next middleware or handler → @router.md#Middleware</li><li><strong>ALWAYS</strong> skip calling <code>next()</code> to prevent handler execution → @router.md#Middleware</li><li><strong>ALWAYS</strong> register global middleware before per-route middleware → @router.md#Middleware</li></ul><h3 id="connection-context" tabindex="-1">Connection &amp; Context <a class="header-anchor" href="#connection-context" aria-label="Permalink to &quot;Connection &amp; Context&quot;">​</a></h3><ul><li><strong>ALWAYS</strong> access identity via <code>ctx.ws.data.clientId</code> → @validation.md#Reserved-Meta-Keys</li><li><strong>ALWAYS</strong> use <code>ctx.receivedAt</code> for server logic → @schema.md#Which-timestamp-to-use</li><li><strong>ALWAYS</strong> use <code>ctx.assignData(partial)</code> to merge connection data updates (write-partial pattern) → @router.md#Modifying-Connection-Data</li><li><strong>NEVER</strong> mutate <code>ctx.ws.data</code> directly; use <code>assignData()</code> → @router.md#Modifying-Connection-Data</li></ul><h3 id="type-system" tabindex="-1">Type System <a class="header-anchor" href="#type-system" aria-label="Permalink to &quot;Type System&quot;">​</a></h3><ul><li><strong>ALWAYS</strong> use intersection types for conditional <code>payload</code> → ADR-001</li></ul><h3 id="error-handling" tabindex="-1">Error Handling <a class="header-anchor" href="#error-handling" aria-label="Permalink to &quot;Error Handling {#error-handling}&quot;">​</a></h3><ul><li><strong>ALWAYS</strong> use <code>ctx.error(code, message, details)</code> for type-safe error responses → ADR-009, @error-handling.md</li><li><strong>ALWAYS</strong> wrap async ops in try/catch → @error-handling.md</li><li><strong>ALWAYS</strong> keep connections open (handler must close explicitly) → @error-handling.md</li><li><strong>ALWAYS</strong> log errors with <code>clientId</code> for traceability → @error-handling.md</li><li><strong>ALWAYS</strong> implement <code>onError</code> hook in <code>serve()</code> for centralized error handling → ADR-009</li><li><strong>NEVER</strong> include passwords, tokens, API keys, or credentials in error details (automatically stripped) → @error-handling.md#Error-Detail-Sanitization</li></ul><h3 id="messaging" tabindex="-1">Messaging <a class="header-anchor" href="#messaging" aria-label="Permalink to &quot;Messaging&quot;">​</a></h3><ul><li><strong>ALWAYS</strong> use <code>ctx.send()</code> for unicast → @router.md#Type-Safe-Sending</li><li><strong>ALWAYS</strong> use <code>router.publish()</code> for multicast (validates before broadcast) → @broadcasting.md</li><li><strong>ALWAYS</strong> use <code>ctx.error()</code> for sending error messages to clients → @error-handling.md</li><li><strong>NEVER</strong> inject <code>clientId</code> into meta (use <code>origin</code> option for sender tracking) → @broadcasting.md#Origin-Option</li><li><strong>ALWAYS</strong> auto-inject <code>timestamp</code> in outbound messages → @router.md#Type-Safe-Sending</li><li><strong>NEVER</strong> send <code>ERROR</code> from clients unless implementing custom protocol (server-to-client by default) → @error-handling.md#Error-Message-Direction</li></ul><h3 id="lifecycle-hooks-adr-009" tabindex="-1">Lifecycle Hooks (ADR-009) <a class="header-anchor" href="#lifecycle-hooks-adr-009" aria-label="Permalink to &quot;Lifecycle Hooks (ADR-009)&quot;">​</a></h3><ul><li><strong>ALWAYS</strong> implement lifecycle hooks in <code>serve()</code> options for observability → ADR-009, @router.md#Lifecycle-Hooks <ul><li><code>onUpgrade(req)</code> — Before authentication (connection setup)</li><li><code>onOpen(ctx)</code> — After authentication (safe to send messages)</li><li><code>onClose(ctx)</code> — After disconnect (cleanup)</li><li><code>onError(error, ctx)</code> — Centralized error handling</li><li><code>onBroadcast(message, scope)</code> — Track broadcast events</li></ul></li><li><strong>ALWAYS</strong> unsubscribe in <code>onClose()</code> → @broadcasting.md</li><li><strong>ALWAYS</strong> store topic IDs in <code>ctx.ws.data</code> → @broadcasting.md</li><li><strong>NEVER</strong> throw in lifecycle hooks; errors are caught and logged → ADR-009</li></ul><hr><h2 id="type-system-trade-offs" tabindex="-1">Type System Trade-offs <a class="header-anchor" href="#type-system-trade-offs" aria-label="Permalink to &quot;Type System Trade-offs&quot;">​</a></h2><p>Accept these TypeScript violations for better DX:</p><ul><li><strong>LSP variance in <code>merge()</code></strong> → ADR-001</li><li><strong><code>| any</code> in <code>merge()</code></strong> (allows derived router instances) → ADR-001</li><li><strong><code>@ts-expect-error</code> in type overrides</strong> (enables IDE inference) → ADR-001</li></ul><hr><h2 id="performance" tabindex="-1">Performance Requirements <a class="header-anchor" href="#performance" aria-label="Permalink to &quot;Performance Requirements {#performance}&quot;">​</a></h2><ul><li><strong>UUID v7 for <code>clientId</code></strong> (time-ordered, better DB indexing)</li><li><strong>Map-based handler lookup</strong> (O(1) by message type)</li><li><strong>Last-write-wins registration</strong> (log warnings on overwrite)</li><li><strong>Single handler per type</strong> (server only; client supports multi-handler)</li><li><strong>Normalization in hot path</strong> (strip reserved keys inline; O(k) where k≤3)</li></ul><hr><h2 id="state-layering" tabindex="-1">State Layering <a class="header-anchor" href="#state-layering" aria-label="Permalink to &quot;State Layering {#state-layering}&quot;">​</a></h2><h3 id="connection-state-ctx-ws-data" tabindex="-1">Connection State (<code>ctx.ws.data</code>) <a class="header-anchor" href="#connection-state-ctx-ws-data" aria-label="Permalink to &quot;Connection State (\`ctx.ws.data\`)&quot;">​</a></h3><ul><li><code>clientId</code>: Generated during upgrade (UUID v7), NOT in message <code>meta</code></li><li>Custom session data (userId, roles, etc.)</li></ul><h3 id="message-state-ctx-meta" tabindex="-1">Message State (<code>ctx.meta</code>) <a class="header-anchor" href="#message-state-ctx-meta" aria-label="Permalink to &quot;Message State (\`ctx.meta\`)&quot;">​</a></h3><ul><li><code>correlationId</code>: Client-controlled request/response correlation</li><li><code>timestamp</code>: Producer time (client&#39;s clock, optional)</li><li>Extended meta fields from schema</li></ul><h3 id="server-context-ctx" tabindex="-1">Server Context (<code>ctx</code>) <a class="header-anchor" href="#server-context-ctx" aria-label="Permalink to &quot;Server Context (\`ctx\`)&quot;">​</a></h3><ul><li><code>receivedAt</code>: Server receive timestamp (authoritative, separate from <code>meta.timestamp</code>)</li></ul><hr><h2 id="reserved-keys" tabindex="-1">Reserved Server-Only Keys <a class="header-anchor" href="#reserved-keys" aria-label="Permalink to &quot;Reserved Server-Only Keys {#reserved-keys}&quot;">​</a></h2><p><strong>CANONICAL LIST</strong> (see @validation.md#normalization-rules for implementation):</p><ul><li><code>clientId</code>: Connection identity (access via <code>ctx.ws.data.clientId</code>)</li><li><code>receivedAt</code>: Server receive timestamp (access via <code>ctx.receivedAt</code>)</li></ul><p><strong>Enforcement:</strong></p><ul><li>Routers MUST strip reserved keys during normalization (security boundary) → @validation.md#normalization-rules</li><li>Schema creation MUST reject extended meta defining reserved keys (fails fast at design time) → @schema.md#Reserved-Server-Only-Meta-Keys</li></ul><hr><h2 id="client-side-constraints" tabindex="-1">Client-Side Constraints <a class="header-anchor" href="#client-side-constraints" aria-label="Permalink to &quot;Client-Side Constraints&quot;">​</a></h2><blockquote><p>Applies to browser/Node client (<code>@ws-kit/client</code>)</p></blockquote><h3 id="message-normalization-outbound" tabindex="-1">Message Normalization (Outbound) <a class="header-anchor" href="#message-normalization-outbound" aria-label="Permalink to &quot;Message Normalization (Outbound)&quot;">​</a></h3><ul><li><strong>ALWAYS</strong> strip reserved/managed keys (<code>clientId</code>, <code>receivedAt</code>, <code>correlationId</code>) from <code>opts.meta</code> → @client.md#client-normalization</li><li><strong>ALWAYS</strong> merge meta in order: <code>{ timestamp: Date.now(), ...sanitizedUserMeta, correlationId }</code> → @client.md#client-normalization</li><li><strong>ALWAYS</strong> provide <code>correlationId</code> via <code>opts.correlationId</code> (NOT <code>opts.meta.correlationId</code>) → @client.md#client-normalization</li><li><strong>ALWAYS</strong> auto-generate <code>correlationId</code> for <code>request()</code> if absent → @client.md#client-normalization</li></ul><h3 id="connection-behavior" tabindex="-1">Connection Behavior <a class="header-anchor" href="#connection-behavior" aria-label="Permalink to &quot;Connection Behavior&quot;">​</a></h3><ul><li><strong>ALWAYS</strong> reject pending <code>request()</code> on close (<code>ConnectionClosedError</code>) → @client.md#Error-Contract</li><li><strong>ALWAYS</strong> reject <code>request()</code> with <code>StateError</code> when <code>state !== &quot;open&quot;</code> and <code>queue: &quot;off&quot;</code> → @client.md#Error-Contract</li><li><strong>NEVER</strong> auto-retry <code>send()</code> or <code>request()</code> after close (at-most-once delivery) → @client.md</li><li><strong>ALWAYS</strong> start timeout AFTER message flush on OPEN socket (not when queued) → @client.md#request-timeout</li><li><strong>ALWAYS</strong> make <code>close()</code> fully idempotent (never throw/reject due to state) → @client.md#Error-Contract</li></ul><h3 id="request-response-correlation" tabindex="-1">Request/Response Correlation <a class="header-anchor" href="#request-response-correlation" aria-label="Permalink to &quot;Request/Response Correlation&quot;">​</a></h3><ul><li><strong>ALWAYS</strong> reject <code>request()</code> with <code>ValidationError</code> when reply has wrong type (matching <code>correlationId</code>) → @client.md#Correlation</li><li><strong>ALWAYS</strong> reject <code>request()</code> with <code>ServerError</code> when reply type is <code>ERROR</code> (matching <code>correlationId</code>) → @client.md#Correlation</li><li><strong>ALWAYS</strong> drop duplicate replies silently (only first settles promise) → @client.md#Correlation</li><li><strong>ALWAYS</strong> reject <code>request()</code> with <code>StateError</code> when <code>opts.signal.aborted === true</code> before dispatch → @client.md#request-timeout</li><li><strong>ALWAYS</strong> clean up AbortSignal listeners automatically → @client.md#request-timeout</li></ul><h3 id="client-error-contract" tabindex="-1">Client Error Contract <a class="header-anchor" href="#client-error-contract" aria-label="Permalink to &quot;Client Error Contract&quot;">​</a></h3><ul><li><strong>Synchronous throws (<code>TypeError</code>)</strong>: Only during setup/preflight validation → @client.md#Error-Contract</li><li><strong>Fire-and-forget (<code>send()</code>)</strong>: NEVER throws; returns <code>boolean</code> → @client.md#fire-and-forget-return</li><li><strong>Promise-based methods</strong>: NEVER throw synchronously; return <code>Promise</code> that may reject → @client.md#Error-Contract</li><li><strong>StateError</strong>: ALWAYS a Promise rejection, NEVER a synchronous throw → @client.md#Error-Contract</li></ul><h3 id="inbound-message-routing" tabindex="-1">Inbound Message Routing <a class="header-anchor" href="#inbound-message-routing" aria-label="Permalink to &quot;Inbound Message Routing&quot;">​</a></h3><ul><li><strong>ALWAYS</strong> route schema handlers BEFORE <code>onUnhandled()</code> hook → @client.md#message-processing-order</li><li><strong>NEVER</strong> pass invalid messages to <code>onUnhandled()</code> (drop at validation) → @client.md#message-processing-order</li><li><strong>ALWAYS</strong> treat messages in <code>onUnhandled()</code> as readonly → @client.md#message-processing-order</li></ul><hr><h2 id="server-client-asymmetry" tabindex="-1">Server vs Client Patterns <a class="header-anchor" href="#server-client-asymmetry" aria-label="Permalink to &quot;Server vs Client Patterns {#server-client-asymmetry}&quot;">​</a></h2><h3 id="handler-registration" tabindex="-1">Handler Registration <a class="header-anchor" href="#handler-registration" aria-label="Permalink to &quot;Handler Registration&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Context</th><th>Behavior</th><th>Rationale</th></tr></thead><tbody><tr><td>Server</td><td>Last-write-wins (warns on overwrite)</td><td>Single authoritative handler per message type; simplified routing</td></tr><tr><td>Client</td><td>Multi-handler (registration order)</td><td>Fan-out pattern common in UI; composability across modules</td></tr></tbody></table><p>See @client.md#Multiple-Handlers for client multi-handler semantics.</p><hr><h2 id="route-composition-patterns" tabindex="-1">Route Composition Patterns <a class="header-anchor" href="#route-composition-patterns" aria-label="Permalink to &quot;Route Composition Patterns&quot;">​</a></h2><ul><li><strong>Use <code>merge()</code></strong> for feature module composition</li><li><strong>Pass auth/session data during <code>upgrade()</code></strong></li><li><strong>Store connection metadata in <code>ctx.ws.data</code></strong> for lifecycle cleanup</li></ul><hr><h2 id="server-side-development-patterns" tabindex="-1">Server-Side Development Patterns <a class="header-anchor" href="#server-side-development-patterns" aria-label="Permalink to &quot;Server-Side Development Patterns&quot;">​</a></h2><ul><li><strong>Use <code>message()</code> helper</strong> (export-with-helpers pattern) for type-safe schema creation → ADR-007</li><li><strong>Use <code>createRouter()</code></strong> to create a new router instance → ADR-007</li><li><strong>Use <code>ctx.assignData()</code></strong> for incremental connection data updates (write-partial pattern) → @router.md#Modifying-Connection-Data</li><li><strong>Use <code>ctx.error()</code></strong> for type-safe error responses with discriminated union codes → ADR-009</li><li><strong>Use <code>ctx.send()</code></strong> for type-safe unicast messaging to the current client → ADR-020</li><li><strong>Use lifecycle hooks</strong> (<code>onOpen</code>, <code>onClose</code>, <code>onError</code>, etc.) for observability → ADR-009</li></ul><h2 id="client-side-development-patterns" tabindex="-1">Client-Side Development Patterns <a class="header-anchor" href="#client-side-development-patterns" aria-label="Permalink to &quot;Client-Side Development Patterns&quot;">​</a></h2><ul><li><strong>Use <code>message()</code> helper</strong> (export-with-helpers pattern) for schema creation → ADR-007</li><li><strong>Use typed clients</strong> (<code>@ws-kit/client/zod</code> or <code>@ws-kit/client/valibot</code>) for full type inference → ADR-002</li><li><strong>Share schemas</strong> between client and server (single source of truth) → @client.md#Sharing-Schemas-Between-Client-and-Server</li><li><strong>Validate before sending</strong> with strict mode (schemas work client-side) → @validation.md</li><li><strong>Use <code>request()</code></strong> for RPC-style request/response with automatic correlationId and timeout → @client.md#Public-API</li><li><strong>Use <code>send()</code></strong> for fire-and-forget (returns boolean, never throws) → @client.md#fire-and-forget-return</li><li><strong>Track broadcasts</strong> via <code>publish(..., { origin?: string; key?: string })</code> → @broadcasting.md#Origin-Option</li></ul>`,89)])])}const u=t(s,[["render",a]]);export{g as __pageData,u as default};
