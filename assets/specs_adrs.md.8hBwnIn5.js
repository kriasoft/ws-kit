import{_ as t,c as r,o as i,ag as o}from"./chunks/framework.DbtdwhWj.js";const u=JSON.parse('{"title":"Architectural Decision Records (ADRs)","description":"","frontmatter":{},"headers":[],"relativePath":"specs/adrs.md","filePath":"specs/adrs.md","lastUpdated":1761868280000}'),a={name:"specs/adrs.md"};function s(n,e,l,d,p,c){return i(),r("div",null,[...e[0]||(e[0]=[o(`<h1 id="architectural-decision-records-adrs" tabindex="-1">Architectural Decision Records (ADRs) <a class="header-anchor" href="#architectural-decision-records-adrs" aria-label="Permalink to &quot;Architectural Decision Records (ADRs)&quot;">​</a></h1><blockquote><p><strong>Purpose:</strong> ADRs document <em>why</em> design decisions were made, not <em>how</em> they work. For implementation details, see the specification files in this directory.</p></blockquote><h2 id="all-adrs" tabindex="-1">All ADRs <a class="header-anchor" href="#all-adrs" aria-label="Permalink to &quot;All ADRs&quot;">​</a></h2><p><strong>Start here:</strong> See the ADR index in <a href="./README#architectural-decision-records-adrs">README.md</a> for a summary table mapping ADRs to impacted specs.</p><h3 id="complete-list-in-order-of-relevance" tabindex="-1">Complete List (In Order of Relevance) <a class="header-anchor" href="#complete-list-in-order-of-relevance" aria-label="Permalink to &quot;Complete List (In Order of Relevance)&quot;">​</a></h3><ol><li><p><strong><a href="./../adr/001-message-context-conditional-payload-typing">ADR-001: MessageContext Conditional Payload Typing</a></strong></p><ul><li><strong>Why:</strong> Enable type-safe <code>ctx.payload</code> access (compile-time error when schema omits payload)</li><li><strong>Impact:</strong> @schema.md, @validation.md, @test-requirements.md</li><li><strong>Status:</strong> ✅ Implemented</li></ul></li><li><p><strong><a href="./../adr/007-export-with-helpers-pattern">ADR-007: Export-with-Helpers Pattern</a></strong></p><ul><li><strong>Why:</strong> Single canonical import source (<code>@ws-kit/zod</code>, <code>@ws-kit/valibot</code>) to prevent dual-package hazards</li><li><strong>Impact:</strong> @schema.md, all validator packages</li><li><strong>Status:</strong> ✅ Implemented</li><li><strong>Supersedes:</strong> ADR-004 (old factory pattern)</li></ul></li><li><p><strong><a href="./../adr/005-builder-pattern-and-symbol-escape-hatch">ADR-005: Builder Pattern and Symbol Escape Hatch</a></strong></p><ul><li><strong>Why:</strong> Transparent router type preservation without Proxy overhead</li><li><strong>Impact:</strong> @router.md, typed router implementations</li><li><strong>Status:</strong> ✅ Implemented</li><li><strong>Related:</strong> ADR-004 (conceptually similar approach)</li></ul></li><li><p><strong><a href="./../adr/008-middleware-support">ADR-008: Middleware Support</a></strong></p><ul><li><strong>Why:</strong> Enable cross-cutting concerns (auth, logging, rate limiting) without duplication</li><li><strong>Impact:</strong> @router.md, @rules.md</li><li><strong>Status:</strong> ✅ Implemented</li></ul></li><li><p><strong><a href="./../adr/009-error-handling-and-lifecycle-hooks">ADR-009: Error Handling and Lifecycle Hooks</a></strong></p><ul><li><strong>Why:</strong> Type-safe error responses and observability into connection lifecycle</li><li><strong>Impact:</strong> @error-handling.md, @router.md, lifecycle integration</li><li><strong>Status:</strong> ✅ Implemented</li></ul></li><li><p><strong><a href="./../adr/010-throttled-broadcast-pattern">ADR-010: Throttled Broadcast Pattern</a></strong></p><ul><li><strong>Why:</strong> Reduce bandwidth 80-95% for rapid updates (live cursors, presence, frequent state changes)</li><li><strong>Impact:</strong> @patterns.md, @broadcasting.md, utility functions in @ws-kit/core</li><li><strong>Status:</strong> ✅ Implemented</li></ul></li><li><p><strong><a href="./../adr/011-structured-logging-adapter">ADR-011: Structured Logging Adapter</a></strong></p><ul><li><strong>Why:</strong> Enable production logging integration (Winston, Pino, Datadog) without monkeypatching console</li><li><strong>Impact:</strong> @router.md (logger config), all logging points in core</li><li><strong>Status:</strong> ✅ Implemented</li></ul></li><li><p><strong><a href="./../adr/006-multi-runtime-serve-with-explicit-selection">ADR-006: Multi-Runtime <code>serve()</code> with Explicit Selection</a></strong></p><ul><li><strong>Why:</strong> Unified serving API across platforms (Bun, Cloudflare, Deno) with explicit runtime selection</li><li><strong>Impact:</strong> @router.md#Basic-Setup, platform adapters</li><li><strong>Status:</strong> ✅ Implemented</li></ul></li><li><p><strong><a href="./../adr/002-typed-client-adapters">ADR-002: Typed Client Adapters via Type Overrides</a></strong></p><ul><li><strong>Why:</strong> Full type inference in client handlers without manual type guards</li><li><strong>Impact:</strong> @client.md, client implementations (<code>/zod/client</code>, <code>/valibot/client</code>)</li><li><strong>Status:</strong> ✅ Implemented</li></ul></li><li><p><strong><a href="./../adr/003-example-imports">ADR-003: Example Import Strategy with Path Aliases</a></strong></p></li></ol><ul><li><strong>Why:</strong> Production-like imports in development examples without build steps</li><li><strong>Impact:</strong> Examples, TypeScript/Bun configuration</li><li><strong>Status:</strong> ✅ Implemented</li></ul><ol start="11"><li><strong><a href="./../adr/004-typed-router-factory">ADR-004: Typed Router Factory Pattern</a></strong></li></ol><ul><li><strong>Why:</strong> Type preservation through factory functions (predecessor approach)</li><li><strong>Status:</strong> ⚠️ Superseded by ADR-005 + ADR-007</li><li><strong>Note:</strong> Kept for historical reference; concepts still valid</li></ul><h2 id="how-adrs-relate-to-specs" tabindex="-1">How ADRs Relate to Specs <a class="header-anchor" href="#how-adrs-relate-to-specs" aria-label="Permalink to &quot;How ADRs Relate to Specs&quot;">​</a></h2><p><strong>ADRs explain the <em>why</em>; Specs explain the <em>what</em> and <em>how</em>.</strong></p><ul><li>Use <strong>ADR links</strong> when documenting design rationale or trade-offs</li><li>Use <strong>Spec links</strong> when explaining implementation details or usage patterns</li><li>Reference specific ADRs in spec sections when important for understanding decisions</li></ul><p>Example:</p><div class="language-markdown vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">markdown</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">&gt; For conditional payload typing design rationale, see ADR-001.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">&gt; For implementation details, see @schema.md#Conditional-Payload-Typing.</span></span></code></pre></div><h2 id="deprecation-and-superseded-adrs" tabindex="-1">Deprecation and Superseded ADRs <a class="header-anchor" href="#deprecation-and-superseded-adrs" aria-label="Permalink to &quot;Deprecation and Superseded ADRs&quot;">​</a></h2><ul><li><strong>ADR-004</strong> is superseded by <strong>ADR-005</strong> (builder pattern) + <strong>ADR-007</strong> (export-with-helpers) <ul><li>Kept in <code>docs/adr/</code> for historical context</li><li>No need to reference in new documentation</li></ul></li></ul><h2 id="backwards-compatibility-notes" tabindex="-1">Backwards Compatibility Notes <a class="header-anchor" href="#backwards-compatibility-notes" aria-label="Permalink to &quot;Backwards Compatibility Notes&quot;">​</a></h2><p>See individual ADR files for:</p><ul><li>Deprecation timelines</li><li>Migration paths</li><li>Supported patterns and their versions</li></ul>`,19)])])}const m=t(a,[["render",s]]);export{u as __pageData,m as default};
