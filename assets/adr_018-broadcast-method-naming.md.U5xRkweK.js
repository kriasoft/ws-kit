import{_ as a,c as e,o as i,ag as t}from"./chunks/framework.DbtdwhWj.js";const g=JSON.parse('{"title":"ADR-018: Broadcast Method Naming","description":"","frontmatter":{},"headers":[],"relativePath":"adr/018-broadcast-method-naming.md","filePath":"adr/018-broadcast-method-naming.md","lastUpdated":1761868280000}'),n={name:"adr/018-broadcast-method-naming.md"};function o(r,s,l,d,h,c){return i(),e("div",null,[...s[0]||(s[0]=[t(`<h1 id="adr-018-broadcast-method-naming" tabindex="-1">ADR-018: Broadcast Method Naming <a class="header-anchor" href="#adr-018-broadcast-method-naming" aria-label="Permalink to &quot;ADR-018: Broadcast Method Naming&quot;">​</a></h1><p><strong>Status</strong>: Implemented <strong>Date</strong>: 2025-10-30 <strong>References</strong>: ADR-007, ADR-010, docs/specs/broadcasting.md</p><h2 id="context" tabindex="-1">Context <a class="header-anchor" href="#context" aria-label="Permalink to &quot;Context&quot;">​</a></h2><p>Router needs a method for multicast messaging to topic subscribers. Method name signals intent to developers: <strong>type-safe + validated</strong> vs <strong>raw/unsafe</strong>.</p><h2 id="decision" tabindex="-1">Decision <a class="header-anchor" href="#decision" aria-label="Permalink to &quot;Decision&quot;">​</a></h2><h3 id="✅-publish-—-recommended" tabindex="-1">✅ <code>publish()</code> — RECOMMENDED <a class="header-anchor" href="#✅-publish-—-recommended" aria-label="Permalink to &quot;✅ \`publish()\` — RECOMMENDED&quot;">​</a></h3><p><strong>Rationale:</strong></p><ul><li><strong>Industry standard</strong> — Message brokers (RabbitMQ, Redis, Kafka, NATS) use <code>publish()</code></li><li><strong>Intent signal</strong> — Implies type-safe, validated messages (vs raw <code>ws.publish()</code>)</li><li><strong>Semantic clarity</strong> — Distinguishes validated routing from low-level WebSocket API</li><li><strong>Single canonical path</strong> — Developers reach for <code>router.publish()</code>, not unsafe alternatives</li></ul><p><strong>Usage:</strong></p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Type-safe: schema validation enforced</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">router.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">publish</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`room:\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">roomId</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, UserJoined, { userId, roomId });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// vs raw WebSocket (no validation, avoid)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ws.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">publish</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;room:123&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /* ... */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><hr><h3 id="broadcast" tabindex="-1"><code>broadcast()</code> <a class="header-anchor" href="#broadcast" aria-label="Permalink to &quot;\`broadcast()\`&quot;">​</a></h3><p><strong>Reasoning against:</strong></p><ul><li>Ambiguous with raw WebSocket <code>broadcast()</code> methods</li><li>Doesn&#39;t signal validation/schema enforcement</li><li>Developers might conflate validated and unvalidated paths</li><li>Less alignment with industry pub/sub terminology</li></ul><hr><h2 id="consequences" tabindex="-1">Consequences <a class="header-anchor" href="#consequences" aria-label="Permalink to &quot;Consequences&quot;">​</a></h2><p>✅ Clear intent — <code>publish()</code> means validated multicast ✅ Discoverability — Aligns with message broker conventions ✅ Type safety — Contrast with unsafe alternatives is obvious ⚠️ Documentation needed — Explain difference from WebSocket API</p><h2 id="references" tabindex="-1">References <a class="header-anchor" href="#references" aria-label="Permalink to &quot;References&quot;">​</a></h2><ul><li>Implementation: <code>packages/core/src/router.ts</code> (publish method)</li><li>Spec: <code>docs/specs/broadcasting.md</code></li><li>Related: ADR-010 (Throttled Broadcast Pattern)</li></ul>`,19)])])}const k=a(n,[["render",o]]);export{g as __pageData,k as default};
