import{_ as e,c as d,o as r,ag as a}from"./chunks/framework.DbtdwhWj.js";const h=JSON.parse('{"title":"Architectural Decision Records (ADRs)","description":"","frontmatter":{},"headers":[],"relativePath":"adr/README.md","filePath":"adr/README.md","lastUpdated":1761868280000}'),o={name:"adr/README.md"};function n(s,t,i,c,l,p){return r(),d("div",null,[...t[0]||(t[0]=[a('<h1 id="architectural-decision-records-adrs" tabindex="-1">Architectural Decision Records (ADRs) <a class="header-anchor" href="#architectural-decision-records-adrs" aria-label="Permalink to &quot;Architectural Decision Records (ADRs)&quot;">​</a></h1><p>This directory contains architectural decisions that shaped ws-kit&#39;s design. Each ADR documents the problem, decision, and rationale behind major features and patterns.</p><h2 id="index" tabindex="-1">Index <a class="header-anchor" href="#index" aria-label="Permalink to &quot;Index&quot;">​</a></h2><table tabindex="0"><thead><tr><th>#</th><th>Title</th><th>Status</th><th>Impact</th><th>Related Spec</th></tr></thead><tbody><tr><td><a href="./001-message-context-conditional-payload-typing">001</a></td><td>Message Context Conditional Payload Typing</td><td>✅ Implemented</td><td>Core—Type safety for message payloads</td><td><a href="./../specs/schema">schema.md</a></td></tr><tr><td><a href="./002-typed-client-adapters">002</a></td><td>Typed Client Adapters via Type Overrides</td><td>✅ Implemented</td><td>Client—Full type inference in browser/Node.js</td><td><a href="./../specs/client">client.md</a></td></tr><tr><td><a href="./003-example-imports">003</a></td><td>Example Imports</td><td>—</td><td>Documentation</td><td>—</td></tr><tr><td><a href="./004-typed-router-factory">004</a></td><td>Typed Router Factory</td><td>—</td><td>Superseded by ADR-007</td><td>—</td></tr><tr><td><a href="./005-builder-pattern-and-symbol-escape-hatch">005</a></td><td>Builder Pattern and Symbol Escape Hatch</td><td>—</td><td>Design pattern exploration</td><td>—</td></tr><tr><td><a href="./006-multi-runtime-serve-with-explicit-selection">006</a></td><td>Multi-Runtime <code>serve()</code> with Explicit Selection</td><td>Accepted</td><td>Server—Cross-platform deployment</td><td><a href="./../specs/router">router.md</a></td></tr><tr><td><a href="./007-export-with-helpers-pattern">007</a></td><td>Export-with-Helpers Pattern</td><td>Final</td><td>Core—Message and router API</td><td><a href="./../specs/schema">schema.md</a>, <a href="./../specs/router">router.md</a></td></tr><tr><td><a href="./008-middleware-support">008</a></td><td>Middleware Support (Global and Per-Route)</td><td>Accepted</td><td>Core—Auth, logging, rate limiting</td><td><a href="./../specs/router">router.md</a></td></tr><tr><td><a href="./009-error-handling-and-lifecycle-hooks">009</a></td><td>Error Handling Helpers and Lifecycle Hooks</td><td>Accepted</td><td>Core—Type-safe errors and observability</td><td><a href="./../specs/error-handling">error-handling.md</a></td></tr><tr><td><a href="./010-throttled-broadcast-pattern">010</a></td><td>Throttled Broadcast Pattern</td><td>Accepted</td><td>Optimization—Real-time collaboration</td><td><a href="./../specs/broadcasting">broadcasting.md</a></td></tr><tr><td><a href="./011-structured-logging-adapter">011</a></td><td>Structured Logging Adapter Interface</td><td>Accepted</td><td>Observability—Production logging integration</td><td>—</td></tr><tr><td><a href="./012-rpc-minimal-reliable">012</a></td><td>Minimal Reliable RPC for WebSocket Routing</td><td>✅ Implemented</td><td>RPC—Abort, backpressure, deadlines, one-shot</td><td><a href="./../specs/schema">schema.md</a>, <a href="./../specs/router">router.md</a></td></tr><tr><td><a href="./013-rpc-reconnect-idempotency">013</a></td><td>RPC Reconnect &amp; Idempotency Policy</td><td>✅ Implemented</td><td>RPC—Client resend, deduplication patterns</td><td><a href="./../specs/client">client.md</a></td></tr><tr><td><a href="./014-rpc-dx-safety-improvements">014</a></td><td>RPC DX &amp; Safety Improvements</td><td>✅ Implemented</td><td>RPC—Auto-correlation, unicast, error codes</td><td><a href="./../specs/schema">schema.md</a>, <a href="./../specs/client">client.md</a></td></tr><tr><td><a href="./015-unified-rpc-api-design">015</a></td><td>Unified RPC API with Explicit Primitives</td><td>✅ Implemented</td><td>RPC—Schema unification, reply/progress, taxonomy</td><td><a href="./../specs/schema">schema.md</a>, <a href="./../specs/router">router.md</a></td></tr><tr><td><a href="./016-connection-data-api-naming">016</a></td><td>Connection Data API Naming</td><td>✅ Implemented</td><td>API—<code>assignData()</code> method naming</td><td><a href="./../specs/router">router.md</a></td></tr><tr><td><a href="./017-message-api-parameter-naming">017</a></td><td>Message API Parameter Naming</td><td>✅ Implemented</td><td>API—<code>payload</code>, <code>response</code>, <code>meta</code> terminology</td><td><a href="./../specs/schema">schema.md</a></td></tr><tr><td><a href="./018-broadcast-method-naming">018</a></td><td>Broadcast Method Naming</td><td>✅ Implemented</td><td>API—<code>publish()</code> vs <code>broadcast()</code> terminology</td><td><a href="./../specs/broadcasting">broadcasting.md</a></td></tr><tr><td><a href="./019-ctx-publish-convenience-method">019</a></td><td>Context-Level Publishing (ctx.publish)</td><td>✅ Implemented</td><td>API—<code>ctx.publish()</code> for ergonomic handler DX</td><td><a href="./../specs/broadcasting">broadcasting.md</a></td></tr><tr><td><a href="./020-send-method-naming">020</a></td><td>Send Method Naming</td><td>✅ Implemented</td><td>API—<code>send()</code> vs <code>unicast()</code> terminology</td><td><a href="./../specs/router">router.md</a></td></tr></tbody></table><h2 id="status-legend" tabindex="-1">Status Legend <a class="header-anchor" href="#status-legend" aria-label="Permalink to &quot;Status Legend&quot;">​</a></h2><ul><li><strong>✅ Implemented</strong> — Fully built and tested</li><li><strong>Final</strong> — Finalized design, ready for implementation</li><li><strong>Accepted</strong> — Decision agreed upon, work in progress or planned</li><li><strong>—</strong> — Exploratory or superseded (reference only)</li></ul><h2 id="structure" tabindex="-1">Structure <a class="header-anchor" href="#structure" aria-label="Permalink to &quot;Structure&quot;">​</a></h2><p>Each ADR contains: <strong>Context</strong> (problem) → <strong>Decision</strong> (what) → <strong>Rationale</strong> (why) → <strong>Consequences</strong> (trade-offs).</p><p>Immutable records of decisions at a point in time. Superseded decisions reference newer ADRs.</p>',9)])])}const u=e(o,[["render",n]]);export{h as __pageData,u as default};
