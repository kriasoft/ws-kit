import{_ as i,c as a,o as t,ag as n}from"./chunks/framework.DbtdwhWj.js";const c=JSON.parse('{"title":"ADR-019: Context-Level Publishing (ctx.publish)","description":"","frontmatter":{},"headers":[],"relativePath":"adr/019-ctx-publish-convenience-method.md","filePath":"adr/019-ctx-publish-convenience-method.md","lastUpdated":1761873912000}'),e={name:"adr/019-ctx-publish-convenience-method.md"};function l(h,s,r,p,o,d){return t(),a("div",null,[...s[0]||(s[0]=[n(`<h1 id="adr-019-context-level-publishing-ctx-publish" tabindex="-1">ADR-019: Context-Level Publishing (ctx.publish) <a class="header-anchor" href="#adr-019-context-level-publishing-ctx-publish" aria-label="Permalink to &quot;ADR-019: Context-Level Publishing (ctx.publish)&quot;">​</a></h1><p><strong>Status</strong>: Implemented <strong>Date</strong>: 2025-10-30 <strong>Related</strong>: ADR-018 (Broadcast Method Naming), docs/specs/broadcasting.md</p><h2 id="context" tabindex="-1">Context <a class="header-anchor" href="#context" aria-label="Permalink to &quot;Context&quot;">​</a></h2><p>Router now supports type-safe, schema-validated publishing via <code>router.publish()</code> (ADR-018). However, developers frequently publish from within message handlers. The question: how do we surface publishing in handler context for optimal ergonomics?</p><h2 id="problem-statement" tabindex="-1">Problem Statement <a class="header-anchor" href="#problem-statement" aria-label="Permalink to &quot;Problem Statement&quot;">​</a></h2><p><strong>Two candidate approaches:</strong></p><ol><li><p><strong>Method on context</strong>: <code>ctx.publish(channel, schema, payload, options?)</code></p><ul><li>Pros: Ergonomic in handlers; discoverable via IDE autocomplete; consistent with <code>ctx.send()</code>, <code>ctx.subscribe()</code></li><li>Cons: Adds to context surface area; blurs router-level vs connection-level boundaries</li></ul></li><li><p><strong>Standalone helper function</strong>: <code>publish(router, channel, schema, payload, options?)</code></p><ul><li>Pros: Architectural purity; explicit router dependency</li><li>Cons: Awkward in handlers (extra param); users must remember to import and pass router</li></ul></li></ol><h2 id="decision" tabindex="-1">Decision <a class="header-anchor" href="#decision" aria-label="Permalink to &quot;Decision&quot;">​</a></h2><p><strong>✅ Method on context</strong>: <code>ctx.publish()</code></p><h3 id="rationale" tabindex="-1">Rationale <a class="header-anchor" href="#rationale" aria-label="Permalink to &quot;Rationale&quot;">​</a></h3><h4 id="_1-developer-experience-70-weight" tabindex="-1">1. <strong>Developer Experience (70% weight)</strong> <a class="header-anchor" href="#_1-developer-experience-70-weight" aria-label="Permalink to &quot;1. **Developer Experience (70% weight)**&quot;">​</a></h4><p>Handlers are the primary use case (~95% of publish operations):</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ✅ Ergonomic (method)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">router.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(UserCreated, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ctx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ctx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">publish</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    \`org:\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ctx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">payload</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">orgId</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}:users\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    UserListInvalidated,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    { orgId: ctx.payload.orgId }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ❌ Awkward (helper function)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> publish</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(router, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`org:\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ctx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">payload</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">orgId</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}:users\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h4 id="_2-consistency-with-existing-patterns" tabindex="-1">2. <strong>Consistency with Existing Patterns</strong> <a class="header-anchor" href="#_2-consistency-with-existing-patterns" aria-label="Permalink to &quot;2. **Consistency with Existing Patterns**&quot;">​</a></h4><p>ws-kit&#39;s API philosophy:</p><ul><li><strong>Factories for setup</strong>: <code>message()</code>, <code>rpc()</code>, <code>createRouter()</code></li><li><strong>Methods for operations</strong>: <code>ctx.send()</code>, <code>ctx.reply()</code>, <code>ctx.subscribe()</code>, <code>ctx.unsubscribe()</code></li></ul><p>Adding <code>ctx.publish()</code> completes this natural set, rather than introducing a different convention (standalone function).</p><h4 id="_3-ide-discoverability" tabindex="-1">3. <strong>IDE Discoverability</strong> <a class="header-anchor" href="#_3-ide-discoverability" aria-label="Permalink to &quot;3. **IDE Discoverability**&quot;">​</a></h4><ul><li><code>ctx.</code> autocomplete immediately shows available operations</li><li>Standalone function requires import and memory</li><li>Critical for developer onboarding</li></ul><h4 id="_4-semantic-clarity" tabindex="-1">4. <strong>Semantic Clarity</strong> <a class="header-anchor" href="#_4-semantic-clarity" aria-label="Permalink to &quot;4. **Semantic Clarity**&quot;">​</a></h4><p><code>ctx.publish()</code> sits naturally among context operations:</p><ul><li><code>ctx.send()</code> → unicast to single connection</li><li><code>ctx.subscribe(topic)</code> → join broadcast group</li><li><code>ctx.publish(topic, ...)</code> → send to broadcast group</li><li><code>ctx.unsubscribe(topic)</code> → leave broadcast group</li></ul><p>This forms a coherent, understandable API surface.</p><h4 id="_5-no-real-architectural-cost" tabindex="-1">5. <strong>No Real Architectural Cost</strong> <a class="header-anchor" href="#_5-no-real-architectural-cost" aria-label="Permalink to &quot;5. **No Real Architectural Cost**&quot;">​</a></h4><p>The &quot;boundary blur&quot; concern is mitigated:</p><ul><li><code>ctx.publish</code> is <strong>explicitly documented</strong> as a bound passthrough to <code>router.publish()</code></li><li>No new logic; pure delegation</li><li>Authorization is still enforced via subscription rules (not context)</li><li>System-level operations use <code>router.publish()</code> directly (cron, queues)</li></ul><h4 id="_6-non-handler-case-is-still-simple" tabindex="-1">6. <strong>Non-Handler Case is Still Simple</strong> <a class="header-anchor" href="#_6-non-handler-case-is-still-simple" aria-label="Permalink to &quot;6. **Non-Handler Case is Still Simple**&quot;">​</a></h4><p>Users without context still use <code>router.publish()</code>:</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Cron job, queue, lifecycle</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> router.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">publish</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(channel, schema, payload);</span></span></code></pre></div><p>No need for a third API; two entry points suffice.</p><h2 id="api-design" tabindex="-1">API Design <a class="header-anchor" href="#api-design" aria-label="Permalink to &quot;API Design&quot;">​</a></h2><p><strong>Two canonical entry points:</strong></p><table tabindex="0"><thead><tr><th>Context</th><th>Method</th><th>Return</th></tr></thead><tbody><tr><td><strong>Handler/Middleware</strong></td><td><code>ctx.publish(channel, schema, payload, options?)</code></td><td><code>Promise&amp;lt;number&amp;gt;</code></td></tr><tr><td><strong>Outside handler</strong></td><td><code>router.publish(channel, schema, payload, options?)</code></td><td><code>Promise&amp;lt;number&amp;gt;</code></td></tr></tbody></table><p>Both enforce schema validation. <code>ctx.publish</code> is a thin passthrough:</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> publish</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">channel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">schema</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">payload</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">publish</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(channel, schema, payload, options);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h2 id="publishoptions" tabindex="-1">PublishOptions <a class="header-anchor" href="#publishoptions" aria-label="Permalink to &quot;PublishOptions&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PublishOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  excludeSelf</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Future: suppress sender echo</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  partitionKey</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Future: distributed sharding</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  meta</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Record</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">unknown</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Custom metadata</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><strong>Current</strong>: Only <code>meta</code> is used; validation enforced for all options</li><li><strong>Future</strong>: <code>excludeSelf</code> and <code>partitionKey</code> enable distributed pubsub without breaking API</li></ul><h2 id="return-value-promise-lt-publishresult-gt" tabindex="-1">Return Value: Promise&lt;PublishResult&gt; <a class="header-anchor" href="#return-value-promise-lt-publishresult-gt" aria-label="Permalink to &quot;Return Value: Promise&amp;lt;PublishResult&amp;gt;&quot;">​</a></h2><p>Returns honest delivery semantics with capability information:</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PublishResult</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">      ok</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">      capability</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;exact&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;estimate&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;unknown&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">      matched</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// undefined if capability is &quot;unknown&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">      ok</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">      reason</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;validation&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;acl&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;adapter_error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">      error</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> unknown</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    };</span></span></code></pre></div><p><strong>Improvements over <code>Promise&lt;number&gt;</code></strong>:</p><ul><li><strong>Honest reporting</strong>: No sentinel values (always <code>1</code>). MemoryPubSub returns exact count, distributed systems return &quot;unknown&quot;</li><li><strong>Error handling</strong>: Distinguish validation failures, ACL denial, and adapter errors</li><li><strong>Feature negotiation</strong>: Know if <code>excludeSelf</code> or <code>partitionKey</code> are supported before using</li><li><strong>Testing</strong>: Assert specific fan-out count only when capability is &quot;exact&quot;</li><li><strong>Metrics</strong>: Track broadcast scope and delivery capability together</li></ul><h2 id="consequences" tabindex="-1">Consequences <a class="header-anchor" href="#consequences" aria-label="Permalink to &quot;Consequences&quot;">​</a></h2><p>✅ <strong>Optimal handler DX</strong> — Discoverable, consistent, ergonomic ✅ <strong>No architectural compromise</strong> — Clear documentation of boundaries ✅ <strong>Backward compatible</strong> — <code>router.publish()</code> is canonical; <code>ctx.publish()</code> adds convenience ✅ <strong>Future-proof</strong> — Options enable distributed systems without API break ⚠️ <strong>Context complexity</strong> — Adds one method to context interface ⚠️ <strong>Documentation required</strong> — Must clarify that <code>ctx.publish</code> is system-level, not connection-level</p><h2 id="implementation-notes" tabindex="-1">Implementation Notes <a class="header-anchor" href="#implementation-notes" aria-label="Permalink to &quot;Implementation Notes&quot;">​</a></h2><ol><li><strong>Thin delegation</strong>: No logic in context method; all validation/telemetry in <code>router.publish()</code></li><li><strong>Error handling</strong>: Returns 0 on validation/permission failures</li><li><strong>Metadata</strong>: Auto-injects <code>timestamp</code>; <code>clientId</code> never broadcast</li><li><strong>Validation</strong>: Same strict validation as <code>ctx.send()</code> for consistency</li></ol><h2 id="related-decisions" tabindex="-1">Related Decisions <a class="header-anchor" href="#related-decisions" aria-label="Permalink to &quot;Related Decisions&quot;">​</a></h2><ul><li><strong>ADR-018</strong>: <code>publish()</code> method naming (vs <code>broadcast()</code>)</li><li><strong>ADR-007</strong>: Export-with-helpers pattern (factory functions)</li><li><strong>docs/specs/broadcasting.md</strong>: Usage patterns and best practices</li></ul><h2 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples&quot;">​</a></h2><h3 id="in-handler" tabindex="-1">In Handler <a class="header-anchor" href="#in-handler" aria-label="Permalink to &quot;In Handler&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">router.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(UserCreated, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ctx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> user</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> db.users.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx.payload);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ctx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">publish</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    \`org:\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ctx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">payload</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">orgId</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}:users\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    UserListInvalidated,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    { orgId: ctx.payload.orgId },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  );</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (result.ok) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ctx.log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">debug</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      \`Notified \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">result</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">matched</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ??</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;?&quot;} subscribers (\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">result</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">capability</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">})\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ctx.log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`Failed to notify: \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">result</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">reason</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, result.error);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h3 id="outside-handler" tabindex="-1">Outside Handler <a class="header-anchor" href="#outside-handler" aria-label="Permalink to &quot;Outside Handler&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// In cron, queue, lifecycle</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> router.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">publish</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;system:announcements&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  System.Announcement,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { text: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Maintenance at 02:00 UTC&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (result.ok) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`Published to \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">result</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">matched</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ??</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;subscribers&quot;}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`Failed to publish\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, result.error);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="naming-publish-vs-broadcast" tabindex="-1">Naming: &quot;publish&quot; vs &quot;broadcast&quot; <a class="header-anchor" href="#naming-publish-vs-broadcast" aria-label="Permalink to &quot;Naming: &quot;publish&quot; vs &quot;broadcast&quot;&quot;">​</a></h2><p><strong>See ADR-018 for full rationale.</strong> Quick summary:</p><table tabindex="0"><thead><tr><th>Term</th><th>Meaning</th><th>Used By</th><th>ws-kit Choice</th></tr></thead><tbody><tr><td><strong>publish()</strong></td><td>Type-safe, validated multicast</td><td>RabbitMQ, Redis, Kafka, NATS</td><td>✅</td></tr><tr><td><strong>broadcast()</strong></td><td>Raw, unvalidated multicast</td><td>WebSocket APIs (raw <code>ws.publish()</code>)</td><td>❌</td></tr></tbody></table><p><strong>Why &quot;publish&quot; (not &quot;broadcast&quot;)</strong>:</p><ul><li><strong>Industry standard</strong> — Message brokers use &quot;publish/subscribe&quot; terminology</li><li><strong>Intent signal</strong> — Implies schema validation and type safety</li><li><strong>Semantic clarity</strong> — Avoids conflation with raw WebSocket broadcast APIs</li><li><strong>Consistency</strong> — Aligns <code>ctx.publish()</code> with <code>router.publish()</code> across abstraction levels</li></ul><h2 id="api-layering-two-canonical-publishing-patterns" tabindex="-1">API Layering: Two Canonical Publishing Patterns <a class="header-anchor" href="#api-layering-two-canonical-publishing-patterns" aria-label="Permalink to &quot;API Layering: Two Canonical Publishing Patterns&quot;">​</a></h2><p>ws-kit provides two complementary publishing patterns for different use cases:</p><table tabindex="0"><thead><tr><th>API</th><th>Location</th><th>Use Case</th><th>Returns</th></tr></thead><tbody><tr><td><strong><code>ctx.publish(...)</code></strong></td><td>Message context</td><td>Handlers; ergonomic sugar</td><td><code>Promise&lt;PublishResult&gt;</code></td></tr><tr><td><strong><code>router.publish(...)</code></strong></td><td>Router instance</td><td>System jobs, cron, lifecycle</td><td><code>Promise&lt;PublishResult&gt;</code></td></tr></tbody></table><p>Both are high-level, type-safe, schema-validated APIs with identical return semantics. Choose based on context: use <code>ctx.publish()</code> in handlers (ergonomic), <code>router.publish()</code> outside handlers (canonical).</p><h2 id="summary" tabindex="-1">Summary <a class="header-anchor" href="#summary" aria-label="Permalink to &quot;Summary&quot;">​</a></h2><p><strong>Method on context</strong> wins on DX, consistency, and discoverability without sacrificing architecture. The standalone function alternative buys nothing; users either have context (use method) or have router (use router.publish() directly). A third API adds complexity without solving a real problem.</p><p>This decision aligns ws-kit with idiomatic Rust/Go/Node.js patterns where methods on receivers (context) are preferred over exported helpers that duplicate parameters.</p><p><strong>Naming</strong>: All publish APIs use <code>publish()</code> (not <code>broadcast()</code>) to signal schema validation and align with industry pub/sub terminology. See ADR-018 for full rationale.</p>`,67)])])}const g=i(e,[["render",l]]);export{c as __pageData,g as default};
