import{_ as i,c as e,o as a,ag as n}from"./chunks/framework.DbtdwhWj.js";const c=JSON.parse('{"title":"ADR-013: RPC Reconnect & Idempotency Policy","description":"","frontmatter":{},"headers":[],"relativePath":"adr/013-rpc-reconnect-idempotency.md","filePath":"adr/013-rpc-reconnect-idempotency.md","lastUpdated":1761868280000}'),t={name:"adr/013-rpc-reconnect-idempotency.md"};function l(p,s,h,r,k,o){return a(),e("div",null,[...s[0]||(s[0]=[n(`<h1 id="adr-013-rpc-reconnect-idempotency-policy" tabindex="-1">ADR-013: RPC Reconnect &amp; Idempotency Policy <a class="header-anchor" href="#adr-013-rpc-reconnect-idempotency-policy" aria-label="Permalink to &quot;ADR-013: RPC Reconnect &amp; Idempotency Policy&quot;">​</a></h1><h2 id="metadata" tabindex="-1">Metadata <a class="header-anchor" href="#metadata" aria-label="Permalink to &quot;Metadata&quot;">​</a></h2><ul><li><strong>Date</strong>: 2025-10-30</li><li><strong>Status</strong>: Accepted</li><li><strong>Tags</strong>: RPC, reconnection, idempotency, client-side resilience</li></ul><h2 id="context" tabindex="-1">Context <a class="header-anchor" href="#context" aria-label="Permalink to &quot;Context&quot;">​</a></h2><p>WebSocket connections are unreliable in practice:</p><ul><li>Mobile networks drop connections frequently.</li><li>Browser tab suspension/hibernation causes disconnects.</li><li>Server-side eviction (e.g., Cloudflare DO rehydration) orphans in-flight RPCs.</li></ul><p>Clients need a reliable policy for handling in-flight requests across reconnects:</p><ul><li><strong>Reject safely</strong>: If no idempotency guarantee, fail fast rather than silently retry.</li><li><strong>Smart retry</strong>: For idempotent operations (queries, read-heavy RPCs), allow client-initiated resend.</li><li><strong>Deduplication</strong>: Prevent accidental duplicate execution when the same request is resent.</li></ul><p>This ADR defines the default policy and pattern for apps to opt into idempotency.</p><h2 id="decision" tabindex="-1">Decision <a class="header-anchor" href="#decision" aria-label="Permalink to &quot;Decision&quot;">​</a></h2><h3 id="_1-default-reconnect-policy-fail-fast" tabindex="-1">1. <strong>Default Reconnect Policy: Fail-Fast</strong> <a class="header-anchor" href="#_1-default-reconnect-policy-fail-fast" aria-label="Permalink to &quot;1. **Default Reconnect Policy: Fail-Fast**&quot;">​</a></h3><p>When socket disconnects, all pending RPC promises reject with <code>WsDisconnectedError</code> immediately.</p><p><strong>Rationale</strong>: Safe default for non-idempotent operations (mutations, stateful work). No silent retries.</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Example</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ChargeCard, { amount: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (error) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (error </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WsDisconnectedError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Connection dropped; payment may or may not have gone through</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // App must handle ambiguity (query backend, show manual retry UI)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_2-opt-in-resend-with-idempotencykey" tabindex="-1">2. <strong>Opt-In Resend with <code>idempotencyKey</code></strong> <a class="header-anchor" href="#_2-opt-in-resend-with-idempotencykey" aria-label="Permalink to &quot;2. **Opt-In Resend with \`idempotencyKey\`**&quot;">​</a></h3><p>If RPC request includes <code>meta.idempotencyKey</code> (string) and reconnects <strong>within <code>RESEND_WINDOW_MS</code></strong> (default 5s), client <strong>auto-resends</strong> the same request.</p><p><strong>Rationale</strong>: Developer declares &quot;this operation is safe to retry&quot;; client honors it automatically.</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Example: idempotent query</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> users</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ListUsers,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { page: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    idempotencyKey: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;list-users-page-1-tab-123&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    signal: abortSignal,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h3 id="_3-single-flight-deduplication-client-side" tabindex="-1">3. <strong>Single-Flight Deduplication (Client-Side)</strong> <a class="header-anchor" href="#_3-single-flight-deduplication-client-side" aria-label="Permalink to &quot;3. **Single-Flight Deduplication (Client-Side)**&quot;">​</a></h3><p>If the same RPC (same <code>(pair, idempotencyKey)</code>) is sent multiple times before the first completes, subsequent calls coalesce to the same promise.</p><p><strong>Prevents</strong>: UI double-click fires two requests; both wait for single execution.</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Example: double-click protection</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> handleClick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Even if clicked twice quickly, only one RPC is in-flight</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(SubmitForm, payload, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    idempotencyKey: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;submit-form-&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Date.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">now</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  updateUI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p><strong>Non-Goals</strong>: Do NOT hash payloads implicitly for dedup; key must be explicit.</p><h3 id="_4-server-side-idempotency-pattern-not-in-core" tabindex="-1">4. <strong>Server-Side Idempotency Pattern (Not in Core)</strong> <a class="header-anchor" href="#_4-server-side-idempotency-pattern-not-in-core" aria-label="Permalink to &quot;4. **Server-Side Idempotency Pattern (Not in Core)**&quot;">​</a></h3><p>Core router provides no idempotency storage. Apps implement via middleware:</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Pseudo-code: idempotency middleware</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">router.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ctx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ctx.isRpc </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ctx.meta.idempotencyKey) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Scope: (tenant, user, rpc-type, key) to prevent cross-user replays</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ctx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ws</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">data</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tenant</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}:\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ctx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ws</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">data</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">userId</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}:\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ctx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">type</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}:\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ctx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">meta</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">idempotencyKey</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> cached</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> idempotencyStorage.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (cached) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Already executed: return cached result without re-running handler</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ctx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cached);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Not seen before: execute handler</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Store result for future identical requests</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ctx.lastReply; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// pseudo-field; TBD in implementation</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> idempotencyStorage.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key, result, ttl: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">300_000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 5 min TTL</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p><strong>Storage Options</strong>: In-memory Map (single-server), Redis, Cloudflare KV, DynamoDB.</p><h3 id="_5-resend-window-time-based-expiry" tabindex="-1">5. <strong>Resend Window &amp; Time-Based Expiry</strong> <a class="header-anchor" href="#_5-resend-window-time-based-expiry" aria-label="Permalink to &quot;5. **Resend Window &amp; Time-Based Expiry**&quot;">​</a></h3><ul><li><strong>Default resend window</strong>: <code>RESEND_WINDOW_MS = 5_000</code> (5 seconds).</li><li><strong>Rationale</strong>: Covers most network glitches; prevents stale retries on network partition.</li><li><strong>Multi-Tab Safety</strong>: Each tab has its own socket; resend only on that socket&#39;s reconnect.</li></ul><p>If reconnect happens &gt;5s after disconnect, pending RPCs reject (not retried). App must handle manually.</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Example: explicit resend with custom window</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MyRPC, payload, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  idempotencyKey: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;op-123&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  resendWindowMs: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30_000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 30-second window for this request</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h3 id="_6-scope-idempotency-keys-properly" tabindex="-1">6. <strong>Scope Idempotency Keys Properly</strong> <a class="header-anchor" href="#_6-scope-idempotency-keys-properly" aria-label="Permalink to &quot;6. **Scope Idempotency Keys Properly**&quot;">​</a></h3><p><strong>Bad</strong>: Key = request payload hash (implicit; user doesn&#39;t know when dedup applies).</p><p><strong>Good</strong>: Key = <code>(user_id, operation, timestamp_or_nonce)</code> (explicit; scoped to user, operation type, intent).</p><p>Example:</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Multi-tenant scenario: prevent user B from re-using user A&#39;s idempotency key</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Server middleware:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ctx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ws</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">data</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tenantId</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}:\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ctx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ws</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">data</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">userId</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}:\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ctx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">type</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}:\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ctx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">meta</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">idempotencyKey</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h2 id="alternatives-considered" tabindex="-1">Alternatives Considered <a class="header-anchor" href="#alternatives-considered" aria-label="Permalink to &quot;Alternatives Considered&quot;">​</a></h2><ol><li><strong>Automatic payload-based dedup</strong>: Pros: no explicit key needed. Cons: implicit behavior, hard to debug, breaks for mutable payloads.</li><li><strong>Server-side idempotency in core</strong>: Pros: guaranteed dedup. Cons: requires stateful router, not all apps need it, storage adapter overhead.</li><li><strong>Indefinite resend window</strong>: Pros: never lose a request. Cons: stale retries on network partition; client stuck re-sending forever.</li><li><strong>Mandatory idempotency key</strong>: Pros: explicit. Cons: breaks existing code, not all RPCs need it.</li></ol><h2 id="consequences" tabindex="-1">Consequences <a class="header-anchor" href="#consequences" aria-label="Permalink to &quot;Consequences&quot;">​</a></h2><h3 id="benefits" tabindex="-1">Benefits <a class="header-anchor" href="#benefits" aria-label="Permalink to &quot;Benefits&quot;">​</a></h3><ul><li><strong>Safe by default</strong>: Apps must opt-in to resend (fail-fast for non-idempotent ops).</li><li><strong>Developer control</strong>: Explicit <code>idempotencyKey</code> makes intent clear.</li><li><strong>Flexible storage</strong>: Apps choose storage backend (Map, Redis, KV).</li><li><strong>Multi-tenant aware</strong>: Middleware pattern encourages proper scoping.</li><li><strong>Time-bounded</strong>: Resend window prevents indefinite retry loops.</li></ul><h3 id="risks-trade-offs" tabindex="-1">Risks / Trade-offs <a class="header-anchor" href="#risks-trade-offs" aria-label="Permalink to &quot;Risks / Trade-offs&quot;">​</a></h3><ul><li><strong>Ambient responsibility</strong>: Developers must scope idempotency keys correctly (documented; exemplified in patterns).</li><li><strong>Duplicated work</strong>: Without idempotency middleware, same request sent twice = executed twice.</li><li><strong>Network partition edge case</strong>: If partition lasts &gt;5s, pending RPCs fail; client must handle manual retry.</li></ul><h3 id="maintenance" tabindex="-1">Maintenance <a class="header-anchor" href="#maintenance" aria-label="Permalink to &quot;Maintenance&quot;">​</a></h3><ul><li>Core: No new state tracking (idempotency is app-level pattern).</li><li>Tests: Resend window boundaries, multi-tab safety note, middleware example tests.</li><li>Docs: Idempotency pattern guide (Map/Redis/KV), scoping guidance, multi-tenant examples.</li></ul><h2 id="references" tabindex="-1">References <a class="header-anchor" href="#references" aria-label="Permalink to &quot;References&quot;">​</a></h2><ul><li><strong>ADR-012</strong>: Describes RPC abort, deadline, one-shot—foundation for reconnect safety.</li><li><strong>Client Implementation</strong>: <code>packages/client/src/index.ts</code> — <code>request()</code> with idempotencyKey, resend logic, <code>WsDisconnectedError</code>.</li><li><strong>Pattern Docs</strong>: <code>docs/specs/patterns.md#idempotent-rpc</code> — middleware code, storage adapter examples.</li><li><strong>Types</strong>: <ul><li><code>packages/client/src/errors.ts</code> — <code>WsDisconnectedError</code></li><li><code>packages/core/src/types.ts</code> — <code>MessageMeta.idempotencyKey</code>, <code>MessageMeta.timeoutMs</code></li></ul></li><li><strong>Constants</strong>: <code>packages/core/src/constants.ts</code> — <code>RESEND_WINDOW_MS</code>, <code>DEFAULT_RPC_TIMEOUT_MS</code></li><li><strong>Example</strong>: <code>examples/rpc-idempotency</code> — middleware + Map storage, Redis adapter snippet.</li></ul>`,47)])])}const E=i(t,[["render",l]]);export{c as __pageData,E as default};
