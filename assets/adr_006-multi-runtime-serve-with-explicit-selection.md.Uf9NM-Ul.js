import{_ as i,c as a,o as e,ag as n}from"./chunks/framework.DbtdwhWj.js";const c=JSON.parse('{"title":"ADR-006: Per-Platform Packages with Both High-Level and Low-Level APIs","description":"","frontmatter":{},"headers":[],"relativePath":"adr/006-multi-runtime-serve-with-explicit-selection.md","filePath":"adr/006-multi-runtime-serve-with-explicit-selection.md","lastUpdated":1761868280000}'),t={name:"adr/006-multi-runtime-serve-with-explicit-selection.md"};function l(r,s,p,h,o,k){return e(),a("div",null,[...s[0]||(s[0]=[n(`<h1 id="adr-006-per-platform-packages-with-both-high-level-and-low-level-apis" tabindex="-1">ADR-006: Per-Platform Packages with Both High-Level and Low-Level APIs <a class="header-anchor" href="#adr-006-per-platform-packages-with-both-high-level-and-low-level-apis" aria-label="Permalink to &quot;ADR-006: Per-Platform Packages with Both High-Level and Low-Level APIs&quot;">​</a></h1><p><strong>Status</strong>: Accepted <strong>Date</strong>: 2025-10-29 <strong>Related</strong>: ADR-005, ADR-007</p><h2 id="context" tabindex="-1">Context <a class="header-anchor" href="#context" aria-label="Permalink to &quot;Context&quot;">​</a></h2><p>WebSocket routing must be available across multiple platforms (Bun, Cloudflare Durable Objects, Deno, etc.), but each platform has different APIs and semantics:</p><ul><li>Bun: <code>Bun.serve()</code> with <code>{ fetch, websocket }</code></li><li>Cloudflare DO: Durable Object handler with <code>fetch(request)</code></li><li>Deno: <code>Deno.serve()</code> with WebSocket upgrade</li></ul><p>This creates design tensions:</p><ol><li><strong>Not all platforms have &quot;serve&quot;</strong> — Cloudflare DO and serverless runtimes don&#39;t bind ports or start servers</li><li><strong>Namespace collision risk</strong> — Creating a separate <code>@ws-kit/serve</code> package that doesn&#39;t have variants for all platforms creates false abstraction</li><li><strong>Single source of truth</strong> — Platform-specific code should live in platform-specific packages</li></ol><h2 id="decision" tabindex="-1">Decision <a class="header-anchor" href="#decision" aria-label="Permalink to &quot;Decision&quot;">​</a></h2><p>Each platform adapter package (e.g., <code>@ws-kit/bun</code>) exports <strong>both high-level and low-level APIs</strong>:</p><h3 id="high-level-api-serve" tabindex="-1">High-Level API: <code>serve()</code> <a class="header-anchor" href="#high-level-api-serve" aria-label="Permalink to &quot;High-Level API: \`serve()\`&quot;">​</a></h3><p>Convenience function for quick starts:</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { serve } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;@ws-kit/bun&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">serve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(router, { port: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span></code></pre></div><ul><li>✅ Recommended for 90% of use cases</li><li>✅ Sensible defaults (auto-generated client IDs, error handling, etc.)</li><li>✅ Type-safe options tailored to platform</li></ul><h3 id="low-level-api-handler-factory" tabindex="-1">Low-Level API: Handler Factory <a class="header-anchor" href="#low-level-api-handler-factory" aria-label="Permalink to &quot;Low-Level API: Handler Factory&quot;">​</a></h3><p>For advanced users needing full control:</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { createBunHandler } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;@ws-kit/bun&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">websocket</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createBunHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(router, options);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Bun.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">serve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  port: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  fetch,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  websocket,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Custom options here</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><ul><li>✅ Full control over platform-specific config</li><li>✅ No wrapper layers, direct integration</li><li>✅ Zero overhead for custom routing logic</li></ul><h3 id="platform-consistency" tabindex="-1">Platform Consistency <a class="header-anchor" href="#platform-consistency" aria-label="Permalink to &quot;Platform Consistency&quot;">​</a></h3><p><strong>Bun (<code>@ws-kit/bun</code>):</strong></p><ul><li><code>serve()</code> — High-level convenience</li><li><code>createBunHandler()</code> — Low-level control</li></ul><p><strong>Cloudflare Durable Objects (<code>@ws-kit/cloudflare-do</code>):</strong></p><ul><li><code>createDurableObjectHandler()</code> — Only low-level (no port binding; &quot;serve&quot; isn&#39;t a concept)</li></ul><p><strong>Future: Deno (<code>@ws-kit/deno</code>):</strong></p><ul><li><code>serve()</code> — High-level convenience (if applicable)</li><li><code>createDenoHandler()</code> — Low-level control</li></ul><h3 id="why-not-a-separate-ws-kit-serve-package" tabindex="-1">Why Not a Separate <code>@ws-kit/serve</code> Package? <a class="header-anchor" href="#why-not-a-separate-ws-kit-serve-package" aria-label="Permalink to &quot;Why Not a Separate \`@ws-kit/serve\` Package?&quot;">​</a></h3><ol><li><strong>Conceptual honesty</strong>: Not all platforms have a &quot;serve&quot; concept. Cloudflare DO and serverless runtimes don&#39;t bind ports.</li><li><strong>Single canonical location</strong>: All platform APIs live in one place (<code>@ws-kit/bun</code>, <code>@ws-kit/cloudflare-do</code>, etc.)</li><li><strong>Reduced fragmentation</strong>: Developers learning Bun naturally look in <code>@ws-kit/bun</code> and find both APIs.</li><li><strong>Simpler mental model</strong>: Platform = one package with all variants.</li><li><strong>No version skew</strong>: Platform packages are versioned together; no cross-package sync needed.</li></ol><h2 id="implementation-examples" tabindex="-1">Implementation Examples <a class="header-anchor" href="#implementation-examples" aria-label="Permalink to &quot;Implementation Examples&quot;">​</a></h2><h3 id="bun-high-level-recommended" tabindex="-1">Bun High-Level (Recommended) <a class="header-anchor" href="#bun-high-level-recommended" aria-label="Permalink to &quot;Bun High-Level (Recommended)&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { z, message, createRouter } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;@ws-kit/zod&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { serve } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;@ws-kit/bun&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> PingMessage</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;PING&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { text: z.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> router</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createRouter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">router.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(PingMessage, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ctx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ctx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;PONG&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), { text: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`Got: \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ctx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">payload</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">text</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">serve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(router, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  port: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  authenticate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { userId: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;123&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h3 id="bun-low-level-advanced" tabindex="-1">Bun Low-Level (Advanced) <a class="header-anchor" href="#bun-low-level-advanced" aria-label="Permalink to &quot;Bun Low-Level (Advanced)&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { createBunHandler } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;@ws-kit/bun&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">websocket</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createBunHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(router, {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  authenticate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { userId: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;123&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Bun.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">serve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  port: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> URL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(req.url).pathname </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/ws&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(req, server);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Not Found&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { status: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">404</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  websocket,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Custom Bun options available here</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h3 id="cloudflare-durable-objects-low-level-only" tabindex="-1">Cloudflare Durable Objects (Low-Level Only) <a class="header-anchor" href="#cloudflare-durable-objects-low-level-only" aria-label="Permalink to &quot;Cloudflare Durable Objects (Low-Level Only)&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { createDurableObjectHandler } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;@ws-kit/cloudflare-do&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> handler</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createDurableObjectHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(router, {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  authenticate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { userId: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;123&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  fetch: handler.fetch,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h2 id="package-structure" tabindex="-1">Package Structure <a class="header-anchor" href="#package-structure" aria-label="Permalink to &quot;Package Structure&quot;">​</a></h2><p>Platform packages expose both APIs in a single import location:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>@ws-kit/bun/</span></span>
<span class="line"><span>├── serve()              # High-level convenience (exported)</span></span>
<span class="line"><span>├── createBunHandler()   # Low-level control (exported)</span></span>
<span class="line"><span>└── BunPubSub           # Platform-specific pubsub (internal)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>@ws-kit/cloudflare-do/</span></span>
<span class="line"><span>├── createDurableObjectHandler()  # Low-level control (only exported)</span></span>
<span class="line"><span>└── CloudflarePubSub             # Platform-specific pubsub (internal)</span></span></code></pre></div><p>All APIs live in platform-specific packages. No generic <code>@ws-kit/serve</code> multi-runtime wrapper package needed.</p><h2 id="consequences" tabindex="-1">Consequences <a class="header-anchor" href="#consequences" aria-label="Permalink to &quot;Consequences&quot;">​</a></h2><h3 id="benefits" tabindex="-1">Benefits <a class="header-anchor" href="#benefits" aria-label="Permalink to &quot;Benefits&quot;">​</a></h3><p>✅ <strong>Honest abstractions</strong> — Each package exports what makes sense for its platform ✅ <strong>Single canonical location</strong> — Find all Bun APIs in <code>@ws-kit/bun</code>, Cloudflare APIs in <code>@ws-kit/cloudflare-do</code>, etc. ✅ <strong>Two-level API per platform</strong> — High-level <code>serve()</code> for 90% of cases, low-level handler factory for advanced users ✅ <strong>No false universality</strong> — Don&#39;t pretend Cloudflare DO has a &quot;serve&quot; concept ✅ <strong>Reduced fragmentation</strong> — Developers naturally look in platform package and find all variants ✅ <strong>Type safety</strong> — Options and APIs tailored to platform capabilities ✅ <strong>Zero version skew</strong> — Platform packages versioned together; no cross-package sync ✅ <strong>Backwards compatible</strong> — Direct handler imports always available</p><h3 id="trade-offs" tabindex="-1">Trade-offs <a class="header-anchor" href="#trade-offs" aria-label="Permalink to &quot;Trade-offs&quot;">​</a></h3><p>⚠️ <strong>Multiple packages required</strong> — One for validator (<code>@ws-kit/zod</code>), one for platform (<code>@ws-kit/bun</code>) ⚠️ <strong>No &quot;universal serve&quot;</strong> — Can&#39;t write code that works across all platforms without choosing one ⚠️ <strong>Mental model change</strong> — Developers must understand platform-specific APIs vary</p><h2 id="alternatives-considered" tabindex="-1">Alternatives Considered <a class="header-anchor" href="#alternatives-considered" aria-label="Permalink to &quot;Alternatives Considered&quot;">​</a></h2><h3 id="_1-single-ws-kit-serve-package-with-all-runtimes" tabindex="-1">1. Single <code>@ws-kit/serve</code> Package with All Runtimes <a class="header-anchor" href="#_1-single-ws-kit-serve-package-with-all-runtimes" aria-label="Permalink to &quot;1. Single \`@ws-kit/serve\` Package with All Runtimes&quot;">​</a></h3><p>Create a central package with <code>@ws-kit/bun</code>, <code>@ws-kit/cloudflare-do</code>, etc.</p><p><strong>Why rejected:</strong></p><ul><li><strong>Conceptual dishonesty</strong>: Cloudflare DO and serverless runtimes don&#39;t have a &quot;serve&quot; concept; creating <code>@ws-kit/cloudflare-do</code> is misleading</li><li><strong>Namespace collision</strong>: Some platforms wouldn&#39;t have variants, creating asymmetry and confusion</li><li><strong>Fragmentation</strong>: Developers looking for Bun APIs split between <code>@ws-kit/bun</code> (adapter) and <code>@ws-kit/bun</code> (convenience)</li><li><strong>Version complexity</strong>: Separate package means separate versioning; easier to get skew</li></ul><h3 id="_2-only-low-level-handler-apis" tabindex="-1">2. Only Low-Level Handler APIs <a class="header-anchor" href="#_2-only-low-level-handler-apis" aria-label="Permalink to &quot;2. Only Low-Level Handler APIs&quot;">​</a></h3><p>Just export <code>createBunHandler()</code>, <code>createCloudflareDOHandler()</code>, etc. No high-level <code>serve()</code>.</p><p><strong>Why rejected:</strong></p><ul><li><strong>Reduces DX significantly</strong> — 90% of users would write boilerplate for <code>Bun.serve()</code></li><li><strong>Inconsistent across platforms</strong>: Bun users write less code than Cloudflare users for the same result</li><li><strong>Learning curve</strong>: New users must understand platform internals before getting started</li><li><strong>Encourages bad patterns</strong>: Without high-level defaults, users may miss security/stability considerations</li></ul><h3 id="_3-central-serve-function-with-dynamic-platform-selection" tabindex="-1">3. Central Serve Function with Dynamic Platform Selection <a class="header-anchor" href="#_3-central-serve-function-with-dynamic-platform-selection" aria-label="Permalink to &quot;3. Central Serve Function with Dynamic Platform Selection&quot;">​</a></h3><p>Create a generic <code>serve()</code> that detects runtime or uses environment variables.</p><p><strong>Why rejected:</strong></p><ul><li><strong>Detection overhead</strong>: Runtime capability checks on startup</li><li><strong>Ambiguity risk</strong>: Environments with multiple runtimes shimmed (e.g., Deno + Bun compat)</li><li><strong>Type precision loss</strong>: Can&#39;t narrow options to platform-specific capabilities when platform is unknown</li><li><strong>Not idiomatic</strong>: Different from how platform frameworks work (Remix, SvelteKit, etc.)</li></ul><h2 id="references" tabindex="-1">References <a class="header-anchor" href="#references" aria-label="Permalink to &quot;References&quot;">​</a></h2><ul><li><strong>ADR-005</strong>: Builder Pattern and Symbol Escape Hatch (context for transparent router)</li><li><strong>ADR-007</strong>: Export-with-Helpers Pattern (uses platform-specific serve() function)</li><li><strong>Implementation</strong>: <ul><li><code>packages/bun/src/serve.ts</code> — Bun high-level convenience</li><li><code>packages/bun/src/handler.ts</code> — Bun low-level handler factory</li><li><code>packages/bun/src/index.ts</code> — Exports both serve() and createBunHandler()</li><li><code>packages/cloudflare-do/src/</code> — Cloudflare handler integration</li></ul></li><li><strong>Specifications</strong>: <ul><li><code>docs/specs/router.md</code> — Router setup and platform selection</li></ul></li><li><strong>Examples</strong>: <ul><li><code>examples/quick-start/index.ts</code> — Bun high-level serve()</li><li><code>examples/bun-zod-chat/index.ts</code> — Bun low-level control</li></ul></li></ul>`,57)])])}const g=i(t,[["render",l]]);export{c as __pageData,g as default};
