import{_ as e,c as t,o as i,ag as o}from"./chunks/framework.DbtdwhWj.js";const h=JSON.parse('{"title":"ADR-016: Connection Data API Naming","description":"","frontmatter":{},"headers":[],"relativePath":"adr/016-connection-data-api-naming.md","filePath":"adr/016-connection-data-api-naming.md","lastUpdated":1761868280000}'),n={name:"adr/016-connection-data-api-naming.md"};function s(l,a,r,c,d,p){return i(),t("div",null,[...a[0]||(a[0]=[o('<h1 id="adr-016-connection-data-api-naming" tabindex="-1">ADR-016: Connection Data API Naming <a class="header-anchor" href="#adr-016-connection-data-api-naming" aria-label="Permalink to &quot;ADR-016: Connection Data API Naming&quot;">​</a></h1><h2 id="problem" tabindex="-1">Problem <a class="header-anchor" href="#problem" aria-label="Permalink to &quot;Problem&quot;">​</a></h2><p>Router needs a method name for partial connection data updates in handlers and middleware. Which name best communicates intent to developers?</p><h2 id="options" tabindex="-1">Options <a class="header-anchor" href="#options" aria-label="Permalink to &quot;Options&quot;">​</a></h2><h3 id="✅-assigndata-—-recommended" tabindex="-1">✅ <code>assignData()</code> — RECOMMENDED <a class="header-anchor" href="#✅-assigndata-—-recommended" aria-label="Permalink to &quot;✅ `assignData()` — RECOMMENDED&quot;">​</a></h3><p><strong>Reasoning:</strong></p><ul><li>Aligns with <code>Object.assign()</code> — standard JavaScript pattern all developers know</li><li>Implementation uses <code>Object.assign(ctx.ws.data, partial)</code> internally, so name matches reality</li><li>No semantic confusion with HTTP PATCH (RFC 6902 uses operations array, not simple object merge)</li><li>Clearly indicates partial updates are supported (unlike &quot;set&quot; which implies full replacement)</li><li>Natural fit with TypeScript&#39;s <code>Partial&lt;T&gt;</code> type signature</li></ul><p><strong>Consequences:</strong></p><ul><li>Slightly longer (10 chars vs alternatives)</li><li>Familiar to JS/TS developers</li><li>Zero confusion with HTTP semantics</li></ul><hr><h3 id="patchdata" tabindex="-1"><code>patchData()</code> <a class="header-anchor" href="#patchdata" aria-label="Permalink to &quot;`patchData()`&quot;">​</a></h3><p><strong>Reasoning against:</strong></p><ul><li>HTTP PATCH has specific semantics (RFC 6902 JSON Patch format) — developers familiar with REST APIs expect <code>[{op: &quot;add&quot;, path: &quot;/userId&quot;, value: &quot;123&quot;}]</code></li><li>Creates false expectations about API behavior</li><li>No standard JavaScript equivalent (<code>Object.patch()</code> doesn&#39;t exist)</li><li>Trendy but imprecise for this use case</li></ul><hr><h3 id="updatedata" tabindex="-1"><code>updateData()</code> <a class="header-anchor" href="#updatedata" aria-label="Permalink to &quot;`updateData()`&quot;">​</a></h3><p><strong>Reasoning against:</strong></p><ul><li>Too generic — doesn&#39;t indicate partial vs full replacement</li><li>Unclear what update strategy is used</li><li>Developers might assume full object replacement</li></ul><hr><h3 id="mergedata" tabindex="-1"><code>mergeData()</code> <a class="header-anchor" href="#mergedata" aria-label="Permalink to &quot;`mergeData()`&quot;">​</a></h3><p><strong>Reasoning against:</strong></p><ul><li>Non-standard in JavaScript (the convention is <code>Object.assign</code>, not <code>Object.merge</code>)</li><li>Could imply deep merge (we only do shallow)</li><li>Less discoverable</li></ul><hr><h3 id="setdata" tabindex="-1"><code>setData()</code> <a class="header-anchor" href="#setdata" aria-label="Permalink to &quot;`setData()`&quot;">​</a></h3><p><strong>Reasoning against:</strong></p><ul><li>Implies full replacement (like <code>Map.set()</code>)</li><li>Doesn&#39;t communicate partial update support</li><li>Creates confusion about merge vs replace semantics</li></ul><h2 id="status" tabindex="-1">Status <a class="header-anchor" href="#status" aria-label="Permalink to &quot;Status&quot;">​</a></h2><p>Implemented as <code>ctx.assignData()</code> throughout codebase. Library not yet published, so this is final.</p><h2 id="references" tabindex="-1">References <a class="header-anchor" href="#references" aria-label="Permalink to &quot;References&quot;">​</a></h2><ul><li>Implementation: <code>packages/core/src/types.ts:118-134</code></li><li>Spec: <code>docs/specs/router.md</code></li><li>Related: ADR-007 (naming principles), ADR-014 (API naming for RPC methods)</li></ul>',29)])])}const m=e(n,[["render",s]]);export{h as __pageData,m as default};
