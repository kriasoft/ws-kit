import{_ as t,c as i,o as s,ag as o}from"./chunks/framework.DbtdwhWj.js";const g=JSON.parse('{"title":"WebSocket Router Specifications","description":"","frontmatter":{},"headers":[],"relativePath":"specs/README.md","filePath":"specs/README.md","lastUpdated":1762007311000}'),a={name:"specs/README.md"};function r(n,e,d,l,c,p){return s(),i("div",null,[...e[0]||(e[0]=[o(`<h1 id="websocket-router-specifications" tabindex="-1">WebSocket Router Specifications <a class="header-anchor" href="#websocket-router-specifications" aria-label="Permalink to &quot;WebSocket Router Specifications&quot;">​</a></h1><p>Technical specifications for <code>WS-Kit</code> - type-safe WebSocket router for Bun and Cloudflare with Zod/Valibot validation.</p><h2 id="navigation-for-ai-tools" tabindex="-1">Navigation for AI Tools <a class="header-anchor" href="#navigation-for-ai-tools" aria-label="Permalink to &quot;Navigation for AI Tools&quot;">​</a></h2><p><strong>Start Here:</strong></p><ol><li><strong>Implementing a feature?</strong> → <code>rules.md</code> (quick index) → linked canonical spec</li><li><strong>Debugging validation?</strong> → <code>validation.md</code> (pipeline) → <code>schema.md</code> (structure)</li><li><strong>Client integration?</strong> → <code>client.md</code> (API) → <code>test-requirements.md</code> (patterns)</li><li><strong>Understanding design?</strong> → <code>docs/adr/</code> (decisions) → linked specs</li></ol><p><strong>Note on rules.md</strong>: It&#39;s a quick-lookup INDEX, not the canonical source. Each rule links to the spec that owns that rule. The linked spec is authoritative.</p><h2 id="canonical-sources-by-concept" tabindex="-1">Canonical Sources by Concept <a class="header-anchor" href="#canonical-sources-by-concept" aria-label="Permalink to &quot;Canonical Sources by Concept&quot;">​</a></h2><p>When specs reference the same concept, the canonical source takes precedence:</p><table tabindex="0"><thead><tr><th>Concept</th><th>Canonical Spec</th><th>Also Discussed In</th><th>Why</th></tr></thead><tbody><tr><td><strong>Timestamp Usage</strong></td><td><code>schema.md#Which-timestamp-to-use</code></td><td>router.md, validation.md</td><td>Single table, referenced everywhere</td></tr><tr><td><strong>Reserved Keys</strong></td><td><code>validation.md#normalization-rules</code></td><td>schema.md</td><td>Implementation details here</td></tr><tr><td><strong>Identity (clientId)</strong></td><td><code>schema.md#Why-clientId-is-not-in-meta</code></td><td>validation.md, rules.md</td><td>Design rationale + implementation</td></tr><tr><td><strong>Error Codes</strong></td><td><code>error-handling.md#error-code-enum</code></td><td>router.md, ADR-015</td><td>Complete taxonomy and decision tree</td></tr><tr><td><strong>Validation Flow</strong></td><td><code>validation.md#Flow</code></td><td>rules.md</td><td>Full pipeline stages</td></tr><tr><td><strong>Normalization</strong></td><td><code>validation.md#normalization-rules</code></td><td>schema.md</td><td>Implementation + code examples</td></tr><tr><td><strong>Export-with-Helpers</strong></td><td><code>schema.md#Canonical-Import-Patterns</code></td><td>ADR-007</td><td>Pattern definition + ADR rationale</td></tr></tbody></table><h2 id="Terminology" tabindex="-1">Terminology <a class="header-anchor" href="#Terminology" aria-label="Permalink to &quot;Terminology {#Terminology}&quot;">​</a></h2><p><strong>Core Patterns:</strong></p><ul><li><strong>Export-with-Helpers</strong>: Import <code>z</code>, <code>message()</code>, and <code>createRouter()</code> from single source (<code>@ws-kit/zod</code> or <code>@ws-kit/valibot</code>) (@schema.md#canonical-import-patterns)</li><li><strong>Message Helper</strong>: Use <code>message(type, payload?, meta?)</code> to create schemas; single validator instance prevents dual-package issues (@schema.md#message-helper)</li><li><strong>Router Creation</strong>: Use <code>createRouter&lt;TData&gt;()</code> with explicit generic for full type inference in handlers (@router.md#Creating-a-Router)</li><li><strong>Typed Clients</strong>: <code>/zod/client</code>, <code>/valibot/client</code> exports with <code>wsClient()</code> for full type inference; generic <code>/client</code> for custom validators only (ADR-002)</li><li><strong>Normalization</strong>: Security boundary; strips reserved keys before validation (@validation.md#normalization-rules)</li><li><strong>Strict Mode</strong>: Validation rejects unknown keys at root/meta/payload levels (@schema.md#Strict-Schemas)</li></ul><p><strong>Message Structure:</strong></p><ul><li><strong>Message Context</strong>: Server handler context (<code>ctx</code>) with validated data + server-provided fields (<code>ws</code>, <code>receivedAt</code>, <code>send</code>) (@router.md#Router-API)</li><li><strong>Extended Meta</strong>: Schema-defined metadata beyond defaults (<code>correlationId</code>, <code>timestamp</code>) (@schema.md#Extended-Meta)</li><li><strong>Reserved Keys</strong>: Server-only meta fields (<code>clientId</code>, <code>receivedAt</code>); stripped during normalization (@validation.md#normalization-rules)</li></ul><p><strong>Identity &amp; Time:</strong></p><ul><li><strong>Connection Identity</strong>: <code>ctx.ws.data.clientId</code> (UUID v7, set during upgrade); transport-layer state, not message state (@schema.md#Why-clientId-is-not-in-meta)</li><li><strong>Producer Time</strong>: <code>meta.timestamp</code> (client clock, optional, may be skewed); for UI display only (@schema.md#Which-timestamp-to-use)</li><li><strong>Authoritative Time</strong>: <code>ctx.receivedAt</code> (server clock, captured at ingress); use for all server logic (@schema.md#Which-timestamp-to-use)</li><li><strong>Origin Tracking</strong>: <code>publish(..., { origin: &quot;userId&quot; })</code> injects sender identity from <code>ws.data</code> into <code>meta.senderId</code> (@broadcasting.md#Origin-Option)</li></ul><p><strong>Messaging Patterns:</strong></p><ul><li><strong>Unicast</strong>: Single-client messaging via <code>ctx.send()</code> (@router.md#Type-Safe-Sending)</li><li><strong>Multicast</strong>: Topic-based broadcasting via <code>publish()</code> to multiple subscribers (@broadcasting.md)</li></ul><h2 id="core-specifications" tabindex="-1">Core Specifications <a class="header-anchor" href="#core-specifications" aria-label="Permalink to &quot;Core Specifications&quot;">​</a></h2><ul><li><strong><a href="./schema">schema.md</a></strong> - Message structure, wire format, type definitions (see ADR-001, ADR-007)</li><li><strong><a href="./router">router.md</a></strong> - Server router API, handlers, lifecycle hooks (see ADR-005, ADR-008, ADR-009)</li><li><strong><a href="./validation">validation.md</a></strong> - Validation flow, normalization, error handling (strict mode per ADR-001)</li><li><strong><a href="./broadcasting">broadcasting.md</a></strong> - Broadcasting patterns, topic subscriptions, multicast messaging (see ADR-009, ADR-010 for throttling)</li><li><strong><a href="./client">client.md</a></strong> - Client SDK API, connection states, queueing (see ADR-002, ADR-006)</li><li><strong><a href="./adapters">adapters.md</a></strong> - Platform adapter responsibilities, limits, and pub/sub guarantees (see ADR-006)</li><li><strong><a href="./rules">rules.md</a></strong> - Development rules (MUST/NEVER) with links to details (cross-index to ADRs)</li><li><strong><a href="./patterns">patterns.md</a></strong> - Architectural patterns for production apps (throttled broadcast, delta sync, optimistic updates, dual-store, etc.)</li></ul><h2 id="supporting-documentation" tabindex="-1">Supporting Documentation <a class="header-anchor" href="#supporting-documentation" aria-label="Permalink to &quot;Supporting Documentation&quot;">​</a></h2><ul><li><strong>Architectural Decisions</strong> - See individual ADRs below (canonical source for design rationale)</li><li><strong><a href="./test-requirements">test-requirements.md</a></strong> - Type-level and runtime test requirements (validates ADR-001, ADR-002)</li><li><strong><a href="./error-handling">error-handling.md</a></strong> - Error codes and patterns (implements ADR-009)</li></ul><h2 id="architectural-decision-records-adrs" tabindex="-1">Architectural Decision Records (ADRs) <a class="header-anchor" href="#architectural-decision-records-adrs" aria-label="Permalink to &quot;Architectural Decision Records (ADRs)&quot;">​</a></h2><p>For comprehensive architecture documentation and design rationale, see the <a href="./../adr/README">ADR Index</a>.</p><p><strong>Key ADRs referenced in specs:</strong></p><ul><li><strong>ADR-007</strong>: <a href="./../adr/007-export-with-helpers-pattern">Export-with-Helpers Pattern</a> — FOUNDATIONAL: Single canonical import source</li><li><strong>ADR-001</strong>: <a href="./../adr/001-message-context-conditional-payload-typing">Message Context Conditional Payload Typing</a> — Type-safe <code>ctx.payload</code> access</li><li><strong>ADR-002</strong>: <a href="./../adr/002-typed-client-adapters">Typed Client Adapters</a> — Full type inference in browser/Node.js clients</li><li><strong>ADR-015</strong>: <a href="./../adr/015-unified-rpc-api-design">Unified RPC API Design</a> — Request/response patterns with schema unification</li></ul><p>See <a href="./../adr/README">docs/adr/README.md</a> for the complete decision index.</p><h2 id="import-quick-reference" tabindex="-1">Import Quick Reference <a class="header-anchor" href="#import-quick-reference" aria-label="Permalink to &quot;Import Quick Reference&quot;">​</a></h2><p><strong>Server imports MUST follow ADR-007 (export-with-helpers pattern).</strong></p><p>For complete canonical import patterns and usage examples, see <strong><a href="./schema#canonical-import-patterns">@schema.md#Canonical-Import-Patterns</a></strong>.</p><p><strong>Quick reference:</strong></p><ul><li>Server (Zod/Valibot): <code>import { z/v, message, createRouter } from &quot;@ws-kit/zod&quot;</code> or <code>@ws-kit/valibot&quot;</code></li><li>Platform (Bun): <code>import { serve } from &quot;@ws-kit/bun&quot;</code></li><li>Client (Typed): <code>import { wsClient } from &quot;@ws-kit/client/zod&quot;</code> or <code>@ws-kit/client/valibot&quot;</code></li><li>Client (Generic): <code>import { wsClient } from &quot;@ws-kit/client&quot;</code></li></ul><h2 id="quick-reference" tabindex="-1">Quick Reference <a class="header-anchor" href="#quick-reference" aria-label="Permalink to &quot;Quick Reference&quot;">​</a></h2><h3 id="message-structure" tabindex="-1">Message Structure <a class="header-anchor" href="#message-structure" aria-label="Permalink to &quot;Message Structure&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Client sends (minimal)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MESSAGE_TYPE&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  payload</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// If schema defines it</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  meta</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    correlationId?: string,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    timestamp?: number,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Producer time (UI display only)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Extended meta fields from schema</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Handler receives (validated + server context)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ctx </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ws,                    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Connection (ws.data.clientId always present)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MESSAGE_TYPE&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  meta: { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },         </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Validated client metadata</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  payload: { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Only exists if schema defines it</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  receivedAt: number,    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Server time (authoritative, use for logic)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  send: SendFunction</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="key-patterns" tabindex="-1">Key Patterns <a class="header-anchor" href="#key-patterns" aria-label="Permalink to &quot;Key Patterns&quot;">​</a></h3><p>For detailed working examples, see <strong><a href="./router">router.md</a></strong> and <strong><a href="./../getting-started">getting started guide</a></strong>. Core concepts include:</p><ol><li><p><strong>Import from single source</strong> (export-with-helpers pattern, ADR-007)</p><ul><li>Server: <code>import { z, message, createRouter } from &quot;@ws-kit/zod&quot;</code></li><li>Client: <code>import { wsClient } from &quot;@ws-kit/client/zod&quot;</code></li></ul></li><li><p><strong>Type-safe message handling</strong> with full inference</p><ul><li>Define schemas with <code>message()</code></li><li>Access <code>ctx.payload</code> without type assertions</li><li>TypeScript enforces when payload exists (ADR-001)</li></ul></li><li><p><strong>Middleware &amp; validation</strong></p><ul><li>Global middleware with <code>router.use((ctx, next) =&gt; ...)</code></li><li>Per-route middleware with <code>router.use(schema, middleware)</code></li><li>Validation occurs before handlers run</li></ul></li><li><p><strong>Broadcasting &amp; pub/sub</strong></p><ul><li>Unicast: <code>ctx.send(schema, data)</code> to current connection</li><li>Multicast: <code>router.publish(topic, schema, data)</code> to subscribers</li><li>Subscribe/unsubscribe with <code>ctx.subscribe()</code> / <code>ctx.unsubscribe()</code></li></ul></li><li><p><strong>Error handling &amp; lifecycle</strong></p><ul><li>Type-safe errors: <code>ctx.error(code, message, details)</code></li><li>Lifecycle hooks: <code>onOpen</code>, <code>onClose</code>, <code>onError</code>, <code>onBroadcast</code></li></ul></li></ol><h2 id="design-philosophy" tabindex="-1">Design Philosophy <a class="header-anchor" href="#design-philosophy" aria-label="Permalink to &quot;Design Philosophy&quot;">​</a></h2><ul><li><strong>Type Safety</strong>: Full TypeScript inference from schema to handler</li><li><strong>Minimal API</strong>: Simple patterns, safe defaults, zero middleware overhead</li><li><strong>Performance</strong>: UUID v7, Map-based routing, O(1) lookups</li><li><strong>Security</strong>: Reserved key stripping, connection identity isolation</li></ul><h2 id="quick-constraint-lookup" tabindex="-1">Quick Constraint Lookup <a class="header-anchor" href="#quick-constraint-lookup" aria-label="Permalink to &quot;Quick Constraint Lookup&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Rule</th><th>Constraint</th><th>Detail</th></tr></thead><tbody><tr><td><strong>Payload access</strong></td><td>NEVER access <code>ctx.payload</code> without schema</td><td>ADR-001</td></tr><tr><td><strong>Imports</strong></td><td>ALWAYS use export-with-helpers (<code>z</code>, <code>message()</code>, <code>createRouter()</code>)</td><td>ADR-007, <code>rules.md#import-patterns</code></td></tr><tr><td><strong>Clients</strong></td><td>ALWAYS use typed clients (<code>wsClient</code> from <code>/zod/client</code> or <code>/valibot/client</code>)</td><td>ADR-002</td></tr><tr><td><strong>Router setup</strong></td><td>ALWAYS use <code>createRouter&lt;TData&gt;()</code> with explicit generic</td><td><code>router.md#Creating-a-Router</code></td></tr><tr><td><strong>Runtime</strong></td><td>ALWAYS use explicit <code>runtime</code> option in production or platform-specific import</td><td><code>rules.md#runtime-selection</code>, ADR-006</td></tr><tr><td><strong>Validation</strong></td><td>NEVER re-validate in handlers</td><td><code>rules.md#validation-flow</code></td></tr><tr><td><strong>Identity</strong></td><td>ALWAYS use <code>ctx.ws.data.clientId</code>, never <code>ctx.meta</code></td><td><code>rules.md#state-layering</code></td></tr><tr><td><strong>Timestamps</strong></td><td>ALWAYS use <code>ctx.receivedAt</code> for server logic</td><td><code>schema.md#Which-timestamp-to-use</code></td></tr><tr><td><strong>Reserved keys</strong></td><td>NEVER set <code>clientId</code>, <code>receivedAt</code> from client</td><td><code>validation.md#normalization-rules</code></td></tr><tr><td><strong>Errors</strong></td><td>ALWAYS use <code>ctx.error()</code> for client errors; log with <code>clientId</code></td><td><code>rules.md#error-handling</code></td></tr><tr><td><strong>Broadcasting</strong></td><td>ALWAYS use <code>router.publish()</code>, not raw <code>ctx.ws.publish()</code></td><td><code>rules.md#messaging</code></td></tr><tr><td><strong>Middleware</strong></td><td>ALWAYS register global before per-route; call <code>next()</code> to continue</td><td><code>router.md#Middleware</code></td></tr></tbody></table><p>See <code>rules.md</code> for complete rules.</p>`,43)])])}const u=t(a,[["render",r]]);export{g as __pageData,u as default};
