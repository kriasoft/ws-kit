import{_ as t,c as i,o as e,ag as a}from"./chunks/framework.DbtdwhWj.js";const k=JSON.parse('{"title":"WebSocket Router Specifications","description":"","frontmatter":{},"headers":[],"relativePath":"specs/README.md","filePath":"specs/README.md","lastUpdated":1761868280000}'),n={name:"specs/README.md"};function r(l,s,d,o,p,h){return e(),i("div",null,[...s[0]||(s[0]=[a(`<h1 id="websocket-router-specifications" tabindex="-1">WebSocket Router Specifications <a class="header-anchor" href="#websocket-router-specifications" aria-label="Permalink to &quot;WebSocket Router Specifications&quot;">​</a></h1><p>Technical specifications for <code>WS-Kit</code> - type-safe WebSocket router for Bun and Cloudflare with Zod/Valibot validation.</p><h2 id="navigation-for-ai-tools" tabindex="-1">Navigation for AI Tools <a class="header-anchor" href="#navigation-for-ai-tools" aria-label="Permalink to &quot;Navigation for AI Tools&quot;">​</a></h2><p><strong>Start Here:</strong></p><ol><li><strong>Implementing a feature?</strong> → <code>rules.md</code> (rules) → linked detail specs</li><li><strong>Debugging validation?</strong> → <code>validation.md</code> (pipeline) → <code>schema.md</code> (structure)</li><li><strong>Client integration?</strong> → <code>client.md</code> (API) → <code>test-requirements.md</code> (patterns)</li><li><strong>Understanding design?</strong> → <code>docs/adr/</code> (decisions) → linked specs</li></ol><p><strong>Canonical Sources</strong> (when specs conflict, these win):</p><ul><li>Reserved keys: <code>validation.md#normalization-rules</code></li><li>Timestamps: <code>schema.md#Which-timestamp-to-use</code></li><li>Error codes: <code>error-handling.md#error-code-enum</code></li><li>Type overrides: ADR-001, ADR-002</li></ul><h2 id="Terminology" tabindex="-1">Terminology <a class="header-anchor" href="#Terminology" aria-label="Permalink to &quot;Terminology {#Terminology}&quot;">​</a></h2><p><strong>Core Patterns:</strong></p><ul><li><strong>Export-with-Helpers</strong>: Import <code>z</code>, <code>message()</code>, and <code>createRouter()</code> from single source (<code>@ws-kit/zod</code> or <code>@ws-kit/valibot</code>) (@schema.md#Canonical-Import-Patterns)</li><li><strong>Message Helper</strong>: Use <code>message(type, payload?, meta?)</code> to create schemas; single validator instance prevents dual-package issues (@schema.md#Export-with-Helpers-Pattern)</li><li><strong>Router Creation</strong>: Use <code>createRouter&lt;TData&gt;()</code> with explicit generic for full type inference in handlers (@router.md#Creating-a-Router)</li><li><strong>Typed Clients</strong>: <code>/zod/client</code>, <code>/valibot/client</code> exports with <code>wsClient()</code> for full type inference; generic <code>/client</code> for custom validators only (ADR-002)</li><li><strong>Normalization</strong>: Security boundary; strips reserved keys before validation (@validation.md#normalization-rules)</li><li><strong>Strict Mode</strong>: Validation rejects unknown keys at root/meta/payload levels (@schema.md#Strict-Schemas)</li></ul><p><strong>Message Structure:</strong></p><ul><li><strong>Message Context</strong>: Server handler context (<code>ctx</code>) with validated data + server-provided fields (<code>ws</code>, <code>receivedAt</code>, <code>send</code>) (@router.md#Router-API)</li><li><strong>Extended Meta</strong>: Schema-defined metadata beyond defaults (<code>correlationId</code>, <code>timestamp</code>) (@schema.md#Extended-Meta)</li><li><strong>Reserved Keys</strong>: Server-only meta fields (<code>clientId</code>, <code>receivedAt</code>); stripped during normalization (@validation.md#normalization-rules)</li></ul><p><strong>Identity &amp; Time:</strong></p><ul><li><strong>Connection Identity</strong>: <code>ctx.ws.data.clientId</code> (UUID v7, set during upgrade); transport-layer state, not message state (@schema.md#Why-clientId-is-not-in-meta)</li><li><strong>Producer Time</strong>: <code>meta.timestamp</code> (client clock, optional, may be skewed); for UI display only (@schema.md#Which-timestamp-to-use)</li><li><strong>Authoritative Time</strong>: <code>ctx.receivedAt</code> (server clock, captured at ingress); use for all server logic (@schema.md#Which-timestamp-to-use)</li><li><strong>Origin Tracking</strong>: <code>publish(..., { origin: &quot;userId&quot; })</code> injects sender identity from <code>ws.data</code> into <code>meta.senderId</code> (@broadcasting.md#Origin-Option)</li></ul><p><strong>Messaging Patterns:</strong></p><ul><li><strong>Unicast</strong>: Single-client messaging via <code>ctx.send()</code> (@router.md#Type-Safe-Sending)</li><li><strong>Multicast</strong>: Topic-based broadcasting via <code>publish()</code> to multiple subscribers (@broadcasting.md)</li></ul><h2 id="core-specifications" tabindex="-1">Core Specifications <a class="header-anchor" href="#core-specifications" aria-label="Permalink to &quot;Core Specifications&quot;">​</a></h2><ul><li><strong><a href="./schema">schema.md</a></strong> - Message structure, wire format, type definitions (see ADR-001, ADR-007)</li><li><strong><a href="./router">router.md</a></strong> - Server router API, handlers, lifecycle hooks (see ADR-005, ADR-008, ADR-009)</li><li><strong><a href="./validation">validation.md</a></strong> - Validation flow, normalization, error handling (strict mode per ADR-001)</li><li><strong><a href="./broadcasting">broadcasting.md</a></strong> - Broadcasting patterns, topic subscriptions, multicast messaging (see ADR-009, ADR-010 for throttling)</li><li><strong><a href="./client">client.md</a></strong> - Client SDK API, connection states, queueing (see ADR-002, ADR-006)</li><li><strong><a href="./adapters">adapters.md</a></strong> - Platform adapter responsibilities, limits, and pub/sub guarantees (see ADR-006)</li><li><strong><a href="./rules">rules.md</a></strong> - Development rules (MUST/NEVER) with links to details (cross-index to ADRs)</li><li><strong><a href="./patterns">patterns.md</a></strong> - Architectural patterns for production apps (throttled broadcast, delta sync, optimistic updates, dual-store, etc.)</li></ul><h2 id="supporting-documentation" tabindex="-1">Supporting Documentation <a class="header-anchor" href="#supporting-documentation" aria-label="Permalink to &quot;Supporting Documentation&quot;">​</a></h2><ul><li><strong>Architectural Decisions</strong> - See individual ADRs below (canonical source for design rationale)</li><li><strong><a href="./test-requirements">test-requirements.md</a></strong> - Type-level and runtime test requirements (validates ADR-001, ADR-002)</li><li><strong><a href="./error-handling">error-handling.md</a></strong> - Error codes and patterns (implements ADR-009)</li></ul><h2 id="architectural-decision-records-adrs" tabindex="-1">Architectural Decision Records (ADRs) <a class="header-anchor" href="#architectural-decision-records-adrs" aria-label="Permalink to &quot;Architectural Decision Records (ADRs)&quot;">​</a></h2><p><strong>When to reference ADRs:</strong></p><ul><li>When explaining <em>why</em> a design choice was made</li><li>When documenting trade-offs and alternatives</li><li>For design rationale and implementation guidance</li></ul><p><strong>Normative ADRs</strong> (foundation of the API design - MUST follow):</p><table tabindex="0"><thead><tr><th>ADR</th><th>Title</th><th>Implements</th><th>Key Decision</th></tr></thead><tbody><tr><td><strong>ADR-007</strong></td><td><a href="./../adr/007-export-with-helpers-pattern">Export-with-Helpers Pattern</a></td><td>@schema.md, @router.md, @client.md</td><td><strong>FOUNDATIONAL</strong>: Single canonical import source (<code>@ws-kit/zod</code> or <code>@ws-kit/valibot</code>) prevents dual-package hazards. All server imports must follow this pattern.</td></tr><tr><td><strong>ADR-001</strong></td><td><a href="./../adr/001-message-context-conditional-payload-typing">Message Context Conditional Payload Typing</a></td><td>@schema.md, @validation.md</td><td>Conditional <code>ctx.payload</code> typing via intersection types—ensures type safety in handlers without manual assertions</td></tr><tr><td><strong>ADR-002</strong></td><td><a href="./../adr/002-typed-client-adapters">Typed Client Adapters via Type Overrides</a></td><td>@client.md</td><td>Separate typed clients (<code>/zod/client</code>, <code>/valibot/client</code>) for full type inference; generic <code>/client</code> for custom validators only</td></tr><tr><td><strong>ADR-005</strong></td><td><a href="./../adr/005-builder-pattern-and-symbol-escape-hatch">Builder Pattern and Symbol Escape Hatch</a></td><td>@router.md</td><td>Plain object builder for <code>createRouter()</code> replacing Proxy; Symbol.for escape hatch for advanced use cases</td></tr></tbody></table><p><strong>Informational ADRs</strong> (reference for design rationale and patterns):</p><table tabindex="0"><thead><tr><th>ADR</th><th>Title</th><th>Impacts Spec</th><th>Key Decision</th></tr></thead><tbody><tr><td><strong>ADR-003</strong></td><td><a href="./../adr/003-example-imports">Example Import Strategy with Path Aliases</a></td><td>Examples</td><td>Production-like imports in development via path aliases</td></tr><tr><td><strong>ADR-004</strong></td><td><a href="./../adr/004-typed-router-factory">Typed Router Factory Pattern</a></td><td>@schema.md, @router.md</td><td>Factory pattern for type preservation (superseded by ADR-005, ADR-007)</td></tr><tr><td><strong>ADR-006</strong></td><td><a href="./../adr/006-multi-runtime-serve-with-explicit-selection">Multi-Runtime <code>serve()</code> with Explicit Selection</a></td><td>@router.md, @client.md</td><td>Unified <code>serve()</code> function across platforms (Bun, Cloudflare, Deno)</td></tr><tr><td><strong>ADR-008</strong></td><td><a href="./../adr/008-middleware-support">Middleware Support</a></td><td>@router.md</td><td>Global and per-route middleware with <code>next()</code> semantics</td></tr><tr><td><strong>ADR-009</strong></td><td><a href="./../adr/009-error-handling-and-lifecycle-hooks">Error Handling and Lifecycle Hooks</a></td><td>@error-handling.md, @router.md</td><td><code>ctx.error()</code> and lifecycle hooks (<code>onError</code>, <code>onUpgrade</code>, <code>onOpen</code>, <code>onClose</code>)</td></tr><tr><td><strong>ADR-010</strong></td><td><a href="./../adr/010-throttled-broadcast-pattern">Throttled Broadcast Pattern</a></td><td>@patterns.md, @broadcasting.md</td><td>Utility functions for coalescing rapid publishes (50-95% bandwidth reduction)</td></tr><tr><td><strong>ADR-011</strong></td><td><a href="./../adr/011-structured-logging-adapter">Structured Logging Adapter</a></td><td>@router.md</td><td>Pluggable logger interface for production deployments (Winston, Pino, Datadog, etc.)</td></tr></tbody></table><h2 id="import-quick-reference" tabindex="-1">Import Quick Reference <a class="header-anchor" href="#import-quick-reference" aria-label="Permalink to &quot;Import Quick Reference&quot;">​</a></h2><p><strong>Server imports MUST follow ADR-007 (export-with-helpers pattern):</strong></p><table tabindex="0"><thead><tr><th>Context</th><th>Import Path</th><th>Spec</th></tr></thead><tbody><tr><td>Server (Zod)</td><td><code>import { z, message, createRouter } from &quot;@ws-kit/zod&quot;</code></td><td>ADR-007, @schema.md#Canonical-Import-Patterns</td></tr><tr><td>Server (Valibot)</td><td><code>import { z, message, createRouter } from &quot;@ws-kit/valibot&quot;</code></td><td>ADR-007, @schema.md#Canonical-Import-Patterns</td></tr><tr><td>Platform (Bun)</td><td><code>import { serve } from &quot;@ws-kit/bun&quot;</code></td><td>ADR-006, @router.md#Basic-Setup</td></tr><tr><td>Utilities (Throttle)</td><td><code>import { createThrottledPublish } from &quot;@ws-kit/core&quot;</code></td><td>@patterns.md, ADR-010</td></tr><tr><td>Utilities (Logger)</td><td><code>import { createLogger, LOG_CONTEXT } from &quot;@ws-kit/core&quot;</code></td><td>@router.md, ADR-011</td></tr><tr><td>Client (Zod typed)</td><td><code>import { wsClient } from &quot;@ws-kit/client/zod&quot;</code></td><td>@client.md, ADR-002</td></tr><tr><td>Client (Valibot typed)</td><td><code>import { wsClient } from &quot;@ws-kit/client/valibot&quot;</code></td><td>@client.md, ADR-002</td></tr><tr><td>Client (generic)</td><td><code>import { wsClient } from &quot;@ws-kit/client&quot;</code></td><td>@client.md</td></tr></tbody></table><p>See @schema.md#Canonical-Import-Patterns for complete import examples.</p><h2 id="quick-reference" tabindex="-1">Quick Reference <a class="header-anchor" href="#quick-reference" aria-label="Permalink to &quot;Quick Reference&quot;">​</a></h2><h3 id="message-structure" tabindex="-1">Message Structure <a class="header-anchor" href="#message-structure" aria-label="Permalink to &quot;Message Structure&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Client sends (minimal)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MESSAGE_TYPE&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  payload</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// If schema defines it</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  meta</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    correlationId?: string,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    timestamp?: number,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Producer time (UI display only)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Extended meta fields from schema</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Handler receives (validated + server context)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ctx </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ws,                    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Connection (ws.data.clientId always present)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MESSAGE_TYPE&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  meta: { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },         </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Validated client metadata</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  payload: { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Only exists if schema defines it</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  receivedAt: number,    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Server time (authoritative, use for logic)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  send: SendFunction</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="key-patterns" tabindex="-1">Key Patterns <a class="header-anchor" href="#key-patterns" aria-label="Permalink to &quot;Key Patterns&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1. Import from single source (export-with-helpers)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { z, message, createRouter } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;@ws-kit/zod&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { serve } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;@ws-kit/bun&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 2. Define connection data type</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AppData</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">userId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 3. Create router and schemas (full type inference!)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> router</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createRouter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AppData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> PingMsg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;PING&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { value: z.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() });</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> PongMsg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;PONG&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { reply: z.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 4. Handle messages (ctx.payload fully typed!)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">router.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(PingMsg, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ctx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Received at:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ctx.receivedAt); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Server time (authoritative)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ctx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(PongMsg, { reply: ctx.payload.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ✅ No type assertions needed</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 5. Middleware and broadcasting</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">router.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ctx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ctx.ws.data?.userId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ctx.type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;PING&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ctx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;UNAUTHENTICATED&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Not authenticated&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">router.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ChatMsg, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ctx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  router.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">publish</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;room:123&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, RoomMsg, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    text: ctx.payload.text,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    userId: ctx.ws.data?.userId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;anon&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 6. Serve with explicit runtime (production-safe)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">serve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(router, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  port: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  runtime: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;bun&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Required in production</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  authenticate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { userId: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user-123&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h2 id="design-philosophy" tabindex="-1">Design Philosophy <a class="header-anchor" href="#design-philosophy" aria-label="Permalink to &quot;Design Philosophy&quot;">​</a></h2><ul><li><strong>Type Safety</strong>: Full TypeScript inference from schema to handler</li><li><strong>Minimal API</strong>: Simple patterns, safe defaults, zero middleware overhead</li><li><strong>Performance</strong>: UUID v7, Map-based routing, O(1) lookups</li><li><strong>Security</strong>: Reserved key stripping, connection identity isolation</li></ul><h2 id="quick-constraint-lookup" tabindex="-1">Quick Constraint Lookup <a class="header-anchor" href="#quick-constraint-lookup" aria-label="Permalink to &quot;Quick Constraint Lookup&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Rule</th><th>Constraint</th><th>Detail</th></tr></thead><tbody><tr><td><strong>Payload access</strong></td><td>NEVER access <code>ctx.payload</code> without schema</td><td>ADR-001</td></tr><tr><td><strong>Imports</strong></td><td>ALWAYS use export-with-helpers (<code>z</code>, <code>message()</code>, <code>createRouter()</code>)</td><td>ADR-007, <code>rules.md#import-patterns</code></td></tr><tr><td><strong>Clients</strong></td><td>ALWAYS use typed clients (<code>wsClient</code> from <code>/zod/client</code> or <code>/valibot/client</code>)</td><td>ADR-002</td></tr><tr><td><strong>Router setup</strong></td><td>ALWAYS use <code>createRouter&lt;TData&gt;()</code> with explicit generic</td><td><code>router.md#Creating-a-Router</code></td></tr><tr><td><strong>Runtime</strong></td><td>ALWAYS use explicit <code>runtime</code> option in production or platform-specific import</td><td><code>rules.md#runtime-selection</code>, ADR-006</td></tr><tr><td><strong>Validation</strong></td><td>NEVER re-validate in handlers</td><td><code>rules.md#validation-flow</code></td></tr><tr><td><strong>Identity</strong></td><td>ALWAYS use <code>ctx.ws.data.clientId</code>, never <code>ctx.meta</code></td><td><code>rules.md#state-layering</code></td></tr><tr><td><strong>Timestamps</strong></td><td>ALWAYS use <code>ctx.receivedAt</code> for server logic</td><td><code>schema.md#Which-timestamp-to-use</code></td></tr><tr><td><strong>Reserved keys</strong></td><td>NEVER set <code>clientId</code>, <code>receivedAt</code> from client</td><td><code>validation.md#normalization-rules</code></td></tr><tr><td><strong>Errors</strong></td><td>ALWAYS use <code>ctx.error()</code> for client errors; log with <code>clientId</code></td><td><code>rules.md#error-handling</code></td></tr><tr><td><strong>Broadcasting</strong></td><td>ALWAYS use <code>router.publish()</code>, not raw <code>ctx.ws.publish()</code></td><td><code>rules.md#messaging</code></td></tr><tr><td><strong>Middleware</strong></td><td>ALWAYS register global before per-route; call <code>next()</code> to continue</td><td><code>router.md#Middleware</code></td></tr></tbody></table><p>See <code>rules.md</code> for complete rules.</p>`,41)])])}const g=t(n,[["render",r]]);export{k as __pageData,g as default};
