import{_ as a,c as e,o as t,ag as i}from"./chunks/framework.DbtdwhWj.js";const k=JSON.parse('{"title":"ADR-017: Message API Parameter Naming","description":"","frontmatter":{},"headers":[],"relativePath":"adr/017-message-api-parameter-naming.md","filePath":"adr/017-message-api-parameter-naming.md","lastUpdated":1761868280000}'),n={name:"adr/017-message-api-parameter-naming.md"};function l(r,s,o,d,p,h){return t(),e("div",null,[...s[0]||(s[0]=[i(`<h1 id="adr-017-message-api-parameter-naming" tabindex="-1">ADR-017: Message API Parameter Naming <a class="header-anchor" href="#adr-017-message-api-parameter-naming" aria-label="Permalink to &quot;ADR-017: Message API Parameter Naming&quot;">​</a></h1><p><strong>Status</strong>: Implemented <strong>Date</strong>: 2025-10-30 <strong>References</strong>: ADR-007, ADR-015, docs/specs/schema.md</p><h2 id="context" tabindex="-1">Context <a class="header-anchor" href="#context" aria-label="Permalink to &quot;Context&quot;">​</a></h2><p>Three parameter names in the unified message API significantly impact clarity:</p><ul><li><code>payload</code> — Message data</li><li><code>response</code> — RPC terminal result schema</li><li><code>meta</code> — Metadata (timestamp, correlation ID, etc.)</li></ul><p>These names affect both definition and handler access:</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> GetUser</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;GET_USER&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  payload: { id: z.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  response: { user: UserSchema },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  meta: { roomId: z.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">router.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GetUser, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ctx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ctx.payload.id;      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Message payload</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ctx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?.(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Terminal reply</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ctx.meta.roomId;     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Message metadata</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h2 id="decision" tabindex="-1">Decision <a class="header-anchor" href="#decision" aria-label="Permalink to &quot;Decision&quot;">​</a></h2><h3 id="payload-—-message-data" tabindex="-1"><code>payload</code> — Message Data <a class="header-anchor" href="#payload-—-message-data" aria-label="Permalink to &quot;\`payload\` — Message Data&quot;">​</a></h3><p><strong>Chosen</strong>: <code>payload</code></p><table tabindex="0"><thead><tr><th>Rationale</th><th>Details</th></tr></thead><tbody><tr><td>WebSocket convention</td><td>Industry standard: socket.io, Centrifuge, ActionCable</td></tr><tr><td>Message semantics</td><td>&quot;Payload&quot; = the cargo being transported</td></tr><tr><td>Pattern-neutral</td><td>Works for pub/sub and RPC equally</td></tr><tr><td>JS precedent</td><td>Node.js EventEmitter, DOM CustomEvent</td></tr></tbody></table><p><strong>Rejected alternatives</strong>: <code>request</code> (RPC-only), <code>data</code> (too vague), <code>body</code> (HTTP-specific), <code>input</code> (functional jargon), <code>params</code> (REST-specific)</p><hr><h3 id="response-—-rpc-terminal-result" tabindex="-1"><code>response</code> — RPC Terminal Result <a class="header-anchor" href="#response-—-rpc-terminal-result" aria-label="Permalink to &quot;\`response\` — RPC Terminal Result&quot;">​</a></h3><p><strong>Chosen</strong>: <code>response</code></p><table tabindex="0"><thead><tr><th>Rationale</th><th>Details</th></tr></thead><tbody><tr><td>RPC standard</td><td>gRPC, Twirp, REST all use &quot;response&quot;</td></tr><tr><td>Intent signal</td><td>Presence of <code>response</code> marks message as RPC</td></tr><tr><td>Handler clarity</td><td>Pairs naturally with <code>ctx.reply()</code></td></tr><tr><td>Bidirectional</td><td><code>payload</code> (request) ↔ <code>response</code> (result)</td></tr></tbody></table><p><strong>Rejected alternatives</strong>: <code>result</code> (ambiguous with progress), <code>reply</code> (awkward in schema), <code>terminal</code> (non-standard), <code>output</code> (functional term), <code>success</code> (doesn&#39;t cover errors)</p><hr><h3 id="meta-—-message-metadata" tabindex="-1"><code>meta</code> — Message Metadata <a class="header-anchor" href="#meta-—-message-metadata" aria-label="Permalink to &quot;\`meta\` — Message Metadata&quot;">​</a></h3><p><strong>Chosen</strong>: <code>meta</code></p><table tabindex="0"><thead><tr><th>Rationale</th><th>Details</th></tr></thead><tbody><tr><td>Web standard</td><td>Express, GraphQL, JSON:API all use &quot;meta&quot;</td></tr><tr><td>Safe naming</td><td>Less conflict-prone than &quot;data&quot;</td></tr><tr><td>WebSocket neutral</td><td>Doesn&#39;t imply HTTP headers or RPC</td></tr><tr><td>IDE friendly</td><td>Single syllable; easy to autocomplete</td></tr></tbody></table><p><strong>Rejected alternatives</strong>: <code>metadata</code> (too verbose), <code>headers</code> (HTTP-specific), <code>context</code> (overloaded), <code>attributes</code> (verbose), <code>tags</code> (wrong semantics)</p><hr><h3 id="config-object-pattern" tabindex="-1">Config Object Pattern <a class="header-anchor" href="#config-object-pattern" aria-label="Permalink to &quot;Config Object Pattern&quot;">​</a></h3><p><strong>Chosen</strong>: <code>message(type, { payload?, response?, meta? })</code></p><ul><li><strong>Forward extensible</strong> — New fields without breaking overloads</li><li><strong>Self-documenting</strong> — IDE shows all options; no argument order to remember</li><li><strong>Backward compatible</strong> — Legacy positional API still works</li><li><strong>Type safe</strong> — Precise overloads enable conditional types</li></ul><p><strong>Examples:</strong></p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Pub/sub</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Broadcast</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;BROADCAST&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { payload: { text: z.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() } });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// RPC with payload</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Query</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;QUERY&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  payload: { id: z.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  response: { data: z.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// RPC without payload</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Ping</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;PING&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { response: { ack: z.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() } });</span></span></code></pre></div><p><strong>Type safety benefits:</strong></p><ul><li><code>ctx.payload</code> only exists if schema defines it</li><li><code>ctx.reply()</code> only exists for RPC messages</li><li><code>ctx.progress()</code> only exists for RPC messages</li></ul><hr><h2 id="consequences" tabindex="-1">Consequences <a class="header-anchor" href="#consequences" aria-label="Permalink to &quot;Consequences&quot;">​</a></h2><p>✅ Familiar terminology — Recognizable across frameworks ✅ Intent signaling — <code>response</code> field clearly marks RPC ✅ Type safety — Conditional types prevent mistakes ✅ Extensible — New fields don&#39;t require new signatures</p><p>⚠️ Three names to remember (but they&#39;re standard across industry)</p><h2 id="implementation" tabindex="-1">Implementation <a class="header-anchor" href="#implementation" aria-label="Permalink to &quot;Implementation&quot;">​</a></h2><p><strong>Status</strong>: ✅ Implemented across both validators</p><ul><li><code>packages/zod/src/schema.ts</code> — Config object overloads</li><li><code>packages/valibot/src/schema.ts</code> — Mirror implementation</li><li><code>packages/core/src/types.ts</code> — Handler context types</li></ul><h2 id="references" tabindex="-1">References <a class="header-anchor" href="#references" aria-label="Permalink to &quot;References&quot;">​</a></h2><ul><li><strong>ADR-007</strong>: Naming principles</li><li><strong>ADR-015</strong>: Unified RPC API design (config object pattern)</li><li><strong>docs/specs/schema.md</strong>: Usage examples</li></ul>`,39)])])}const g=a(n,[["render",l]]);export{k as __pageData,g as default};
