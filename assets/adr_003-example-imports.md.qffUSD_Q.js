import{_ as i,c as e,o as t,ag as a}from"./chunks/framework.DbtdwhWj.js";const k=JSON.parse('{"title":"ADR-003: Example Import Strategy with Path Aliases","description":"","frontmatter":{},"headers":[],"relativePath":"adr/003-example-imports.md","filePath":"adr/003-example-imports.md","lastUpdated":1761868280000}'),n={name:"adr/003-example-imports.md"};function o(l,s,r,p,d,h){return t(),e("div",null,[...s[0]||(s[0]=[a(`<h1 id="adr-003-example-import-strategy-with-path-aliases" tabindex="-1">ADR-003: Example Import Strategy with Path Aliases <a class="header-anchor" href="#adr-003-example-import-strategy-with-path-aliases" aria-label="Permalink to &quot;ADR-003: Example Import Strategy with Path Aliases&quot;">​</a></h1><p><strong>Status</strong>: ✅ Implemented</p><h2 id="context" tabindex="-1">Context <a class="header-anchor" href="#context" aria-label="Permalink to &quot;Context&quot;">​</a></h2><p>Examples need a clear, production-like import pattern that works seamlessly in development while remaining valid after package publishing. The key tension: examples run in a monorepo workspace, but should look like they&#39;re using published packages.</p><h2 id="decision" tabindex="-1">Decision <a class="header-anchor" href="#decision" aria-label="Permalink to &quot;Decision&quot;">​</a></h2><p>Use <strong>TypeScript path aliases + Bun path mappings</strong> to resolve <code>@ws-kit/*</code> imports to source files in development. This provides:</p><ol><li><strong>Unified import pattern</strong>: Examples use production-like imports that work before and after publishing</li><li><strong>Full IDE support</strong>: TypeScript path aliases enable code completion, type checking, go-to-definition</li><li><strong>Zero build overhead</strong>: Pure development tooling (no runtime artifacts)</li><li><strong>Monorepo standard</strong>: Follows TypeScript ecosystem best practices</li></ol><h2 id="implementation" tabindex="-1">Implementation <a class="header-anchor" href="#implementation" aria-label="Permalink to &quot;Implementation&quot;">​</a></h2><h3 id="typescript-configuration-tsconfig-json" tabindex="-1">TypeScript Configuration (<code>tsconfig.json</code>) <a class="header-anchor" href="#typescript-configuration-tsconfig-json" aria-label="Permalink to &quot;TypeScript Configuration (\`tsconfig.json\`)&quot;">​</a></h3><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;compilerOptions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;baseUrl&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;paths&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;@ws-kit/*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;packages/*/src&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="bun-configuration-bunfig-toml" tabindex="-1">Bun Configuration (<code>bunfig.toml</code>) <a class="header-anchor" href="#bun-configuration-bunfig-toml" aria-label="Permalink to &quot;Bun Configuration (\`bunfig.toml\`)&quot;">​</a></h3><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">paths</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&quot;@ws-kit/*&quot; = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;packages/*/src&quot;</span></span></code></pre></div><h3 id="example-usage" tabindex="-1">Example Usage <a class="header-anchor" href="#example-usage" aria-label="Permalink to &quot;Example Usage&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// examples/quick-start/index.ts</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { z, message, createRouter } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;@ws-kit/zod&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { wsClient } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;@ws-kit/client/zod&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { serve } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;@ws-kit/bun&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// All imports resolve to source files via path aliases</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Same imports work after packages are published to npm</span></span></code></pre></div><h2 id="how-it-works" tabindex="-1">How It Works <a class="header-anchor" href="#how-it-works" aria-label="Permalink to &quot;How It Works&quot;">​</a></h2><p><strong>In development</strong>:</p><ul><li>TypeScript resolves <code>@ws-kit/zod</code> → <code>packages/zod/src</code> (via <code>tsconfig.json</code>)</li><li>Bun resolves <code>@ws-kit/zod</code> → <code>packages/zod/src</code> (via <code>bunfig.toml</code>)</li><li>IDE provides full type inference and navigation</li></ul><p><strong>After publishing</strong>:</p><ul><li>npm resolves <code>@ws-kit/zod</code> → installed package from registry</li><li>No code changes needed (imports stay the same)</li><li>package.json dependency declarations handle the mapping</li></ul><h2 id="alternatives-considered" tabindex="-1">Alternatives Considered <a class="header-anchor" href="#alternatives-considered" aria-label="Permalink to &quot;Alternatives Considered&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Option</th><th>Pros</th><th>Cons</th><th>Decision</th></tr></thead><tbody><tr><td>Relative imports <code>../../packages/zod/src</code></td><td>Works immediately</td><td>Doesn&#39;t match production, fragile paths</td><td>❌ Rejected</td></tr><tr><td>Status quo (Bun workspace only)</td><td>Works without config</td><td>Requires workspace knowledge, poor IDE support</td><td>❌ Rejected</td></tr><tr><td><strong>Path aliases</strong></td><td>IDE support, production-like, monorepo standard</td><td>Requires config files</td><td>✅ <strong>Chosen</strong></td></tr><tr><td>Dual examples (dev + prod versions)</td><td>Clear distinction</td><td>Code duplication, maintenance burden</td><td>❌ Rejected</td></tr></tbody></table><h2 id="trade-offs" tabindex="-1">Trade-offs <a class="header-anchor" href="#trade-offs" aria-label="Permalink to &quot;Trade-offs&quot;">​</a></h2><ul><li><strong>Configuration burden</strong>: Requires both <code>tsconfig.json</code> and <code>bunfig.toml</code> setup</li><li><strong>TypeScript-only benefit</strong>: IDE support works via TypeScript, Bun gets fallback resolution</li><li><strong>Path alias maintenance</strong>: If package structure changes, must update path patterns (unlikely)</li></ul><h2 id="constraints-for-contributors" tabindex="-1">Constraints for Contributors <a class="header-anchor" href="#constraints-for-contributors" aria-label="Permalink to &quot;Constraints for Contributors&quot;">​</a></h2><ol><li><strong>ALWAYS</strong> use <code>@ws-kit/*</code> imports in examples (never relative paths)</li><li><strong>NEVER</strong> use <code>/src</code> or <code>/index.js</code> suffixes on package imports</li><li><strong>Keep examples production-ready</strong>: They should work unchanged after publishing</li><li><strong>Test examples with type checking</strong>: Run <code>bun run test:types</code> to verify path resolution</li></ol><h2 id="benefits" tabindex="-1">Benefits <a class="header-anchor" href="#benefits" aria-label="Permalink to &quot;Benefits&quot;">​</a></h2><ul><li>✅ Examples look like production code users will write</li><li>✅ Full IDE code completion and type checking</li><li>✅ Follows TypeScript monorepo best practices</li><li>✅ No special build or runtime setup needed</li><li>✅ Works with both TypeScript and JavaScript projects</li></ul><h2 id="references" tabindex="-1">References <a class="header-anchor" href="#references" aria-label="Permalink to &quot;References&quot;">​</a></h2><ul><li><code>tsconfig.json</code> - TypeScript path configuration</li><li><code>bunfig.toml</code> - Bun runtime path configuration</li><li><code>examples/README.md</code> - User guide for running examples</li></ul>`,29)])])}const u=i(n,[["render",o]]);export{k as __pageData,u as default};
